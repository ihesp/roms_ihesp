<?xml version="1.0"?>

<?xml-stylesheet type="text/xsl" href="namelist_definition.xsl"?>

<entry_id version="2.0">

  <!-- ========================================================================================  -->
  <!-- ROMS Namelist -->
  <!-- ========================================================================================  -->


  <entry id="input_script">
    <type>char</type>
    <category>roms</category>
    <group>ocn_io</group>
    <desc></desc>
    <values>
      <value>ocean.in</value>
    </values>
  </entry>

  <entry id="diag_level">
    <type>integer</type>
    <category>roms</category>
    <group>ocn_io</group>
    <desc></desc>
    <values>
      <value>0</value>
    </values>
  </entry>

  <entry id="calendar" modify_via_xml="CALENDAR">
    <type>char</type>
    <category>roms</category>
    <group>ocn_timemgr</group>
    <desc></desc>
    <values>
      <value>GREGORIAN</value>
    </values>
  </entry>

  <entry id="start_year">
    <type>integer</type>
    <category>roms</category>
    <group>ocn_timemgr</group>
    <desc></desc>
    <values>
      <value>1</value>
    </values>
  </entry>

  <entry id="start_month">
    <type>integer</type>
    <category>roms</category>
    <group>ocn_timemgr</group>
    <desc></desc>
    <values>
      <value>1</value>
    </values>
  </entry>

  <entry id="start_day">
    <type>integer</type>
    <category>roms</category>
    <group>ocn_timemgr</group>
    <desc></desc>
    <values>
      <value>1</value>
    </values>
  </entry>

  <entry id="start_hour">
    <type>integer</type>
    <category>roms</category>
    <group>ocn_timemgr</group>
    <desc></desc>
    <values>
      <value>0</value>
    </values>
  </entry>

  <entry id="start_minute">
    <type>integer</type>
    <category>roms</category>
    <group>ocn_timemgr</group>
    <desc></desc>
    <values>
      <value>0</value>
    </values>
  </entry>

  <entry id="start_second">
    <type>integer</type>
    <category>roms</category>
    <group>ocn_timemgr</group>
    <desc></desc>
    <values>
      <value>0</value>
    </values>
  </entry>


  <entry id="title">
    <type>char</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Application title</desc>
    <values>
      <value>roms e-cesm</value>
    </values>
  </entry>

  <entry id="myappcpp">
    <type>char</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>C-preprocessing Flag</desc>
    <values>
      <value>gst03</value>
    </values>
  </entry>

  <entry id="varname">
    <type>char</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Input variable information file name.  This file needs to be processed
    first so all information arrays can be initialized properly. 
    </desc>
    <values>
      <value>./varinfo.dat</value>
    </values>
  </entry>

  <entry id="ngrids">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Number of nested grids.</desc>
    <values>
      <value>1</value>
    </values>
  </entry>

  <entry id="lm">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Number of I-direction INTERIOR RHO-points</desc>
    <values>
      <value>803</value>
    </values>
  </entry>
  
  <entry id="mm">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Number of J-direction INTERIOR RHO-points</desc>
    <values>
      <value>914</value>
    </values>
  </entry>
  
  <entry id="n">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Number of vertical levels</desc>
    <values>
      <value>50</value>
    </values>
  </entry>

  <entry id="nbed">
    <type>integer</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Number of sediment bed layers</desc>
    <values>
      <value>0</value>
    </values>
  </entry>
  
  <entry id="nat">
    <type>integer</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Number of active tracers (usually, 2)</desc>
    <values>
      <value>2</value>
    </values>
  </entry>
  
  <entry id="npt">
    <type>integer</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Number of inactive passive tracers</desc>
    <values>
      <value>0</value>
    </values>
  </entry>
  
  <entry id="ncs">
    <type>integer</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Number of cohesive (mud) sediment tracers</desc>
    <values>
      <value>0</value>
    </values>
  </entry>
  
  <entry id="nns">
    <type>integer</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Number of non-cohesive (sand) sediment tracers</desc>
    <values>
      <value>0</value>
    </values>
  </entry>

<!-- Domain decomposition parameters for serial, distributed-memory or
     shared-memory configurations used to determine tile horizontal range
     indices (Istr,Iend) and (Jstr,Jend), [1:Ngrids]. -->

  
  <entry id="ntilei">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>I-direction partition</desc>
    <values>
      <value>32</value>
    </values>
  </entry>
  
  <entry id="ntilej">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>J-direction partition</desc>
    <values>
      <value>32</value>
    </values>
  </entry>
  
  <entry id="ntimes">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>90  days after model initial. if DT = 30</desc>
    <values>
      <value>259200</value>
    </values>
  </entry>
  
  <entry id="dt">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Time-Stepping parameters.</desc>
    <values>
      <value>30.0</value>
    </values>
  </entry>
  
  <entry id="ndtfast">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Time-Stepping parameters. </desc>
    <values>
      <value>30.0</value>
    </values>
  </entry>
  
  <entry id="erstr">
    <type>integer</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Model iteration loops parameters</desc>
    <values>
      <value>1</value>
    </values>
  </entry>

  <entry id="erend">
    <type>integer</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Model iteration loops parameters</desc>
    <values>
      <value>1</value>
    </values>
  </entry>

  <entry id="nouter">
    <type>integer</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Model iteration loops parameters</desc>
    <values>
      <value>1</value>
    </values>
  </entry>

  <entry id="ninner">
    <type>integer</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Model iteration loops parameters</desc>
    <values>
      <value>1</value>
    </values>
  </entry>

  <entry id="nintervals">
    <type>integer</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Model iteration loops parameters</desc>
    <values>
      <value>1</value>
    </values>
  </entry>
  
<!-- Number of eigenvalues (NEV) and eigenvectors (NCV) to compute for the
     Lanczos/Arnoldi problem in the Generalized Stability Theory (GST)
     analysis. NCV must be greater than NEV (see documentation below). -->

  <entry id="nev">
    <type>integer</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Number of eigenvalues</desc>
    <values>
      <value>2</value>
    </values>
  </entry>

  <entry id="ncv">
    <type>integer</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>number of eigenvectors</desc>
    <values>
      <value>10</value>
    </values>
  </entry>

  <entry id="nrrec">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>IO parameters</desc>
    <values>
      <value>0</value>
    </values>
  </entry>

  <entry id="lcyclerst">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>IO parameters</desc>
    <values>
      <value>FALSE</value>
    </values>
  </entry>

  <entry id="nrst">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>IO parameters</desc>
    <values>
      <value>86400</value>
    </values>
  </entry>

  <entry id="nsta">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>IO parameters</desc>
    <values>
      <value>1</value>
    </values>
  </entry>

  <entry id="nflt">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>IO parameters</desc>
    <values>
      <value>1</value>
    </values>
  </entry>

  <entry id="ninfo">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>IO parameters</desc>
    <values>
      <value>1</value>
    </values>
  </entry>

  <entry id="ldefout">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Output history, average, diagnostic files parameters. </desc>
    <values>
      <value>T</value>
    </values>
  </entry>

  <entry id="nhis">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Output history, average, diagnostic files parameters. </desc>
    <values>
      <value>360</value>
    </values>
  </entry>

  <entry id="ndefhis">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Output history, average, diagnostic files parameters. </desc>
    <values>
      <value>2880</value>
    </values>
  </entry>

  <entry id="ntsavg">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Output history, average, diagnostic files parameters. </desc>
    <values>
      <value>1</value>
    </values>
  </entry>

  <entry id="navg">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Output history, average, diagnostic files parameters. </desc>
    <values>
      <value>360</value>
    </values>
  </entry>

  <entry id="ndefavg">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Output history, average, diagnostic files parameters. </desc>
    <values>
      <value>2880</value>
    </values>
  </entry>

  <entry id="ntsdia">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Output history, average, diagnostic files parameters. </desc>
    <values>
      <value>1</value>
    </values>
  </entry>

  <entry id="ndia">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Output history, average, diagnostic files parameters. </desc>
    <values>
      <value>360</value>
    </values>
  </entry>

  <entry id="ndefdia">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Output history, average, diagnostic files parameters. </desc>
    <values>
      <value>2880</value>
    </values>
  </entry>

  <entry id="lcycletlm">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Output tangent linear and adjoint models parameters </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="ntlm">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Output tangent linear and adjoint models parameters </desc>
    <values>
      <value>480</value>
    </values>
  </entry>

  <entry id="ndeftlm">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Output tangent linear and adjoint models parameters </desc>
    <values>
      <value>0</value>
    </values>
  </entry>


  <entry id="lcycletadj">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Output tangent linear and adjoint models parameters </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="nadj">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Output tangent linear and adjoint models parameters </desc>
    <values>
      <value>480</value>
    </values>
  </entry>

  <entry id="ndefadj">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Output tangent linear and adjoint models parameters </desc>
    <values>
      <value>0</value>
    </values>
  </entry>

  <entry id="nsff">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Output tangent linear and adjoint models parameters </desc>
    <values>
      <value>480</value>
    </values>
  </entry>

  <entry id="nobc">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Output tangent linear and adjoint models parameters </desc>
    <values>
      <value>480</value>
    </values>
  </entry>

  <entry id="lmultigst">
    <type>logical</type>
    <category>roms</category>
    <group>ocean.in</group>
   <desc>GST output and check pointing restart parameters. </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="lrstgst">
    <type>logical</type>
    <category>roms</category>
    <group>ocean.in</group>
   <desc>GST output and check pointing restart parameters. </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="maxitergst">
    <type>integer</type>
    <category>roms</category>
    <group>ocean.in</group>
   <desc>GST output and check pointing restart parameters. </desc>
    <values>
      <value>500</value>
    </values>
  </entry>

  <entry id="ngst">
    <type>integer</type>
    <category>roms</category>
    <group>ocean.in</group>
   <desc>GST output and check pointing restart parameters. </desc>
    <values>
      <value>10</value>
    </values>
  </entry>

  <entry id="ritz_tol">
    <type>real</type>
    <category>roms</category>
    <group>ocean.in</group>
   <desc> Relative accuracy of the Ritz values computed in the GST analysis. </desc>
    <values>
      <value>1.0e-15</value>
    </values>
  </entry>

  <entry id="tnu2">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
   <desc>Harmonic/biharmonic horizontal diffusion of tracer for nonlinear model and adjoint-based algorithms </desc>
    <values>
      <value>15.0</value>
    </values>
  </entry>

  <entry id="tnu4">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Harmonic/biharmonic horizontal diffusion of tracer for nonlinear model and adjoint-based algorithms </desc>
    <values>
      <value>500.0</value>
    </values>
  </entry>

  <entry id="ad_tnu2">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Harmonic/biharmonic horizontal diffusion of tracer for nonlinear model and adjoint-based algorithms </desc>
    <values>
      <value>0.0</value>
    </values>
  </entry>

  <entry id="ad_tnu4">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Harmonic/biharmonic horizontal diffusion of tracer for nonlinear model and adjoint-based algorithms </desc>
    <values>
      <value>0.0</value>
    </values>
  </entry>

  <entry id="visc2">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Harmonic/biharmonic, horizontal viscosity coefficient for nonlinear model
          and adjoint-based algorithms: [Ngrids].</desc>
    <values>
      <value>15.0</value>
    </values>
  </entry>

  <entry id="visc4">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Harmonic/biharmonic, horizontal viscosity coefficient for nonlinear model
    and adjoint-based algorithms: [Ngrids].
    </desc>
    <values>
      <value>0.0</value>
    </values>
  </entry>

  <entry id="ad_visc2">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Harmonic/biharmonic, horizontal viscosity coefficient for nonlinear model
    and adjoint-based algorithms: [Ngrids].
    </desc>
    <values>
      <value>0.0</value>
    </values>
  </entry>

  <entry id="ad_visc4">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Harmonic/biharmonic, horizontal viscosity coefficient for nonlinear model
    and adjoint-based algorithms: [Ngrids].
    </desc>
    <values>
      <value>0.0</value>
    </values>
  </entry>

  <entry id="akt_bak">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Vertical mixing coefficients for tracers in nonlinear model and
           basic state scale factor in adjoint-based algorithms: [1:NAT+NPT,Ngrids]
    </desc>
    <values>
      <value>1.0e-6, 1.0e-6</value>
    </values>
  </entry>

  <entry id="ad_akt_fac">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Vertical mixing coefficients for tracers in nonlinear model and
           basic state scale factor in adjoint-based algorithms: [1:NAT+NPT,Ngrids]
    </desc>
    <values>
      <value>1.0, 1.0</value>
    </values>
  </entry>

  <entry id="avk_bak">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Vertical mixing coefficient for momentum for nonlinear model and
          basic state scale factor in adjoint-based algorithms: [Ngrids].
    </desc>
    <values>
      <value>1.0e-5</value>
    </values>
  </entry>

  <entry id="ad_avk_fac">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Vertical mixing coefficient for momentum for nonlinear model and
          basic state scale factor in adjoint-based algorithms: [Ngrids].
    </desc>
    <values>
      <value>1.0</value>
    </values>
  </entry>

  <entry id="akk_bak">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Turbulent closure parameters.
    </desc>
    <values>
      <value>5.0e-6</value>
    </values>
  </entry>

  <entry id="akp_bak">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Turbulent closure parameters.
    </desc>
    <values>
      <value>5.0e-6</value>
    </values>
  </entry>

  <entry id="tkenu2">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Turbulent closure parameters.
    </desc>
    <values>
      <value>0.0</value>
    </values>
  </entry>

  <entry id="tkenu4">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Turbulent closure parameters.
    </desc>
    <values>
      <value>0.0</value>
    </values>
  </entry>

  <entry id="gls_p">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Generic length-scale turbulence closure parameters.
    </desc>
    <values>
      <value>3.0</value>
    </values>
  </entry>


  <entry id="gls_m">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Generic length-scale turbulence closure parameters.
    </desc>
    <values>
      <value>1.5</value>
    </values>
  </entry>

  <entry id="gls_n">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Generic length-scale turbulence closure parameters.
    </desc>
    <values>
      <value>-1.0</value>
    </values>
  </entry>

  <entry id="gls_kmin">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Generic length-scale turbulence closure parameters.
    </desc>
    <values>
      <value>7.6e-6</value>
    </values>
  </entry>

  <entry id="gls_pmin">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Generic length-scale turbulence closure parameters.
    </desc>
    <values>
      <value>1.0e-12</value>
    </values>
  </entry>

  <entry id="gls_cmu0">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Generic length-scale turbulence closure parameters.
    </desc>
    <values>
      <value>0.5477d0</value>
    </values>
  </entry>

  <entry id="gls_c1">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Generic length-scale turbulence closure parameters.
    </desc>
    <values>
      <value>1.44</value>
    </values>
  </entry>

  <entry id="gls_c2">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Generic length-scale turbulence closure parameters.
    </desc>
    <values>
      <value>1.92</value>
    </values>
  </entry>

  <entry id="gls_c3m">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Generic length-scale turbulence closure parameters.
    </desc>
    <values>
      <value>-0.4</value>
    </values>
  </entry>

  <entry id="gls_c3p">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Generic length-scale turbulence closure parameters.
    </desc>
    <values>
      <value>1.0</value>
    </values>
  </entry>

  <entry id="gls_sigk">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Generic length-scale turbulence closure parameters.
    </desc>
    <values>
      <value>1.0</value>
    </values>
  </entry>

  <entry id="gls_sigp">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Generic length-scale turbulence closure parameters.
    </desc>
    <values>
      <value>1.3</value>
    </values>
  </entry>

 <!-- Constants used in surface turbulent kinetic energy flux computation.  -->
  <entry id="charnok_alpha">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Charnok surface roughness   
    </desc>
    <values>
      <value>1400.0</value>
    </values>
  </entry>
  <entry id="zos_hsig_alpha">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>roughness from wave amplitude 
    </desc>
    <values>
      <value>0.5</value>
    </values>
  </entry>

  <entry id="sz_alpha">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>roughness from wave dissipation
    </desc>
    <values>
      <value>0.25</value>
    </values>
  </entry>

  <entry id="crgban_cw">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Craig and Banner wave breaking 
    </desc>
    <values>
      <value>100.0</value>
    </values>
  </entry>

  <entry id="rdrg">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Constants used in momentum stress computation.
    </desc>
    <values>
      <value>3.0e-4</value>
    </values>
  </entry>


  <entry id="rdrg2">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Constants used in momentum stress computation.
    </desc>
    <values>
      <value>3.0e-3</value>
    </values>
  </entry>


  <entry id="zob">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Constants used in momentum stress computation.
    </desc>
    <values>
      <value>0.02</value>
    </values>
  </entry>


  <entry id="zos">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Constants used in momentum stress computation.
    </desc>
    <values>
      <value>0.02</value>
    </values>
  </entry>

<!--  Height (m) of atmospheric measurements for Bulk fluxes parameterization. -->

  <entry id="blk_zq">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>air humidity
    </desc>
    <values>
      <value>2.0</value>
    </values>
  </entry>

  <entry id="blk_zt">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>air temperature
    </desc>
    <values>
      <value>2.0</value>
    </values>
  </entry>

  <entry id="blk_zw">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>winds
    </desc>
    <values>
      <value>10.0</value>
    </values>
  </entry>

  <entry id="dcrit">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Minimum depth for wetting and drying.
    </desc>
    <values>
      <value>0.1</value>
    </values>
  </entry>

  <entry id="wtype">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> Jerlov water type: an integer value from 1 to 5.   
    </desc>
    <values>
      <value>1</value>
    </values>
  </entry>

  <entry id="levsfrc">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Deepest level to apply surface momentum stress as a body-force.
    </desc>
    <values>
      <value>15</value>
    </values>
  </entry>

  <entry id="levbfrc">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Shallowest level to apply bottom momentum stress as a body-force.
    </desc>
    <values>
      <value>1</value>
    </values>
  </entry>

  <entry id="vtransform">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Vertical transformation equation
    </desc>
    <values>
      <value>2</value>
    </values>
  </entry>


  <entry id="vstretching">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Vstretching Vertical stretching function
    </desc>
    <values>
      <value>4</value>
    </values>
  </entry>

  <entry id="theta_s">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>surface stretching parameter    
    </desc>
    <values>
      <value>10.0</value>
    </values>
  </entry>

  <entry id="theta_b">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>bottom stretching parameter    
    </desc>
    <values>
      <value>2.0</value>
    </values>
  </entry>

  <entry id="tcline">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>critical depth
    </desc>
    <values>
      <value>400.0</value>
    </values>
  </entry>

  <entry id="rho0">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>mean density
    </desc>
    <values>
      <value>1025.0</value>
    </values>
  </entry>

  <entry id="bvf_bak">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Brunt-Vaisala frequency.
    </desc>
    <values>
      <value>1.0e-5</value>
    </values>
  </entry>

  <entry id="dstart">
    <type>real</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Time-stamp assigned for model initialization
    </desc>
    <values>
      <value>0.0</value>
    </values>
  </entry>


  <entry id="tide_start">
    <type>real</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Time-stamp assigned for tidal forcing
    </desc>
    <values>
      <value>0.0</value>
    </values>
  </entry>

  <entry id="time_ref">
    <type>real</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>model reference time for netcdf output
    </desc>
    <values>
      <value>201001010.0</value>
    </values>
  </entry>

  <entry id="tnudg">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Nudging/relaxation time scales, inverse scales will be computed 
    </desc>
    <values>
      <value>2.0</value>
    </values>
  </entry>


  <entry id="znudg">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Nudging/relaxation time scales, inverse scales will be computed 
    </desc>
    <values>
      <value>2.0</value>
    </values>
  </entry>


  <entry id="m2nudg">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Nudging/relaxation time scales, inverse scales will be computed 
    </desc>
    <values>
      <value>10.0</value>
    </values>
  </entry>


  <entry id="m3nudg">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Nudging/relaxation time scales, inverse scales will be computed 
    </desc>
    <values>
      <value>10.0</value>
    </values>
  </entry>

  <entry id="obcfac">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Factor between passive (outflow) and active (inflow) open boundary
          conditions, [1:Ngrids]. If OBCFAC > 1, nudging on inflow is stronger
          than on outflow (recommended).
    </desc>
    <values>
      <value>10.0</value>
    </values>
  </entry>

  <entry id="r0">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>
    </desc>
    <values>
      <value>1027.0</value>
    </values>
  </entry>

  <entry id="t0">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>
    </desc>
    <values>
      <value>10.0</value>
    </values>
  </entry>

  <entry id="s0">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>
    </desc>
    <values>
      <value>35.0</value>
    </values>
  </entry>

  <entry id="tcoef">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>
    </desc>
    <values>
      <value>1.70e-4</value>
    </values>
  </entry>

  <entry id="scoef">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>
    </desc>
    <values>
      <value>7.6e-4</value>
    </values>
  </entry>

  <entry id="gamma2">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Slipperiness parameter: 1.0 (free slip) or -1.0 (no slip) 
    </desc>
    <values>
      <value>1.0</value>
    </values>
  </entry>

  <entry id="ltracersrc">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Logical switches (TRUE/FALSE) to specify which variables to consider on
          tracers point Sources/Sinks (like river runoff): [1:NAT+NPT,Ngrids].
    </desc>
    <values>
      <value>T, T, T, T, T, T</value>
    </values>
  </entry>

  <entry id="dstrs">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Starting (DstrS) and ending (DendS) day for adjoint sensitivity forcing.
    </desc>
    <values>
      <value>0.0</value>
    </values>
  </entry>

  <entry id="dends">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Starting (DstrS) and ending (DendS) day for adjoint sensitivity forcing.
    </desc>
    <values>
      <value>0.0</value>
    </values>
  </entry>

  <entry id="kstrs">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Starting (kstrS) and ending (kendS) vertical levels for adjoint sensitivity forcing.
    </desc>
    <values>
      <value>1</value>
    </values>
  </entry>

  <entry id="kends">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Starting (kstrS) and ending (kendS) vertical levels for adjoint sensitivity forcing.
    </desc>
    <values>
      <value>1</value>
    </values>
  </entry>

  <entry id="lstate(isfsur)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Logical switches (TRUE/FALSE) to specify the adjoint state variables
          whose sensitivity is required.
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>


  <entry id="lstate(isubar)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Logical switches (TRUE/FALSE) to specify the adjoint state variables
          whose sensitivity is required.
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>


  <entry id="lstate(isvbar)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Logical switches (TRUE/FALSE) to specify the adjoint state variables
          whose sensitivity is required.
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>


  <entry id="lstate(isuvel)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Logical switches (TRUE/FALSE) to specify the adjoint state variables
          whose sensitivity is required.
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>


  <entry id="lstate(isvvel)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Logical switches (TRUE/FALSE) to specify the adjoint state variables
          whose sensitivity is required.
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>


  <entry id="lstate(istvar)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Logical switches (TRUE/FALSE) to specify the adjoint state variables
          whose sensitivity is required.
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>


  <entry id="fstate(isfsur)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Logical switches (TRUE/FALSE) to specify the state variables for
          which Forcing Singular Vectors or Stochastic Optimals is required.
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="fstate(isubar)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Logical switches (TRUE/FALSE) to specify the state variables for
          which Forcing Singular Vectors or Stochastic Optimals is required.
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="fstate(isvbar)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Logical switches (TRUE/FALSE) to specify the state variables for
          which Forcing Singular Vectors or Stochastic Optimals is required.
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="fstate(isuvel)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Logical switches (TRUE/FALSE) to specify the state variables for
          which Forcing Singular Vectors or Stochastic Optimals is required.
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="fstate(ivvel)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Logical switches (TRUE/FALSE) to specify the state variables for
          which Forcing Singular Vectors or Stochastic Optimals is required.
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="fstate(istvar)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Logical switches (TRUE/FALSE) to specify the state variables for
          which Forcing Singular Vectors or Stochastic Optimals is required.
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>


  <entry id="fstate(isustr)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Logical switches (TRUE/FALSE) to specify the state variables for
          which Forcing Singular Vectors or Stochastic Optimals is required.
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>


  <entry id="fstate(isvstr)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Logical switches (TRUE/FALSE) to specify the state variables for
          which Forcing Singular Vectors or Stochastic Optimals is required.
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="fstate(istsur)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Logical switches (TRUE/FALSE) to specify the state variables for
          which Forcing Singular Vectors or Stochastic Optimals is required.
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="so_decay">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Stochastic Optimals time decorrelation scale (days) assumed for
            red noise processes.
    </desc>
    <values>
      <value>2.0d0</value>
    </values>
  </entry>

  <entry id="so_sdev(isfsur)">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Stochastic Optimals surface forcing standard deviation for
            dimensionalization.
    </desc>
    <values>
      <value>1.0d0</value>
    </values>
  </entry>
  <entry id="so_sdev(isubar)">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Stochastic Optimals surface forcing standard deviation for
            dimensionalization.
    </desc>
    <values>
      <value>1.0d0</value>
    </values>
  </entry>
  <entry id="so_sdev(isvbar)">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Stochastic Optimals surface forcing standard deviation for
            dimensionalization.
    </desc>
    <values>
      <value>1.0d0</value>
    </values>
  </entry>
  <entry id="so_sdev(iuvel)">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Stochastic Optimals surface forcing standard deviation for
            dimensionalization.
    </desc>
    <values>
      <value>1.0d0</value>
    </values>
  </entry>
  <entry id="so_sdev(isvvel)">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Stochastic Optimals surface forcing standard deviation for
            dimensionalization.
    </desc>
    <values>
      <value>1.0d0</value>
    </values>
  </entry>
  <entry id="so_sdev(istvar)">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Stochastic Optimals surface forcing standard deviation for
            dimensionalization.
    </desc>
    <values>
      <value>1.0d0</value>
    </values>
  </entry>
  <entry id="so_sdev(isustr)">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Stochastic Optimals surface forcing standard deviation for
            dimensionalization.
    </desc>
    <values>
      <value>1.0d0</value>
    </values>
  </entry>

  <entry id="so_sdev(isvstr)">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Stochastic Optimals surface forcing standard deviation for
            dimensionalization.
    </desc>
    <values>
      <value>1.0d0</value>
    </values>
  </entry>

  <entry id="so_sdev(istsur)">
    <type>real(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Stochastic Optimals surface forcing standard deviation for
            dimensionalization.
    </desc>
    <values>
      <value>1.0d0</value>
    </values>
  </entry>

<!-- Logical switches (TRUE/FALSE) to activate writing of fields into
      HISTORY output file. -->

  <entry id="hout(iduvel)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>3D u-velocity
    </desc>
    <values>
      <value>T</value>
    </values>
  </entry>

  <entry id="hout(idvvel)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>3D v-velocity
    </desc>
    <values>
      <value>T</value>
    </values>
  </entry>

  <entry id="hout(idwvel)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>3D w-velocity
    </desc>
    <values>
      <value>T</value>
    </values>
  </entry>

  <entry id="hout(idovel)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>3D omega-velocity
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idubar)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>2D u-velocity
    </desc>
    <values>
      <value>T</value>
    </values>
  </entry>

  <entry id="hout(idvbar)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>2D v-velocity
    </desc>
    <values>
      <value>T</value>
    </values>
  </entry>

  <entry id="hout(idfsur)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>zeta free-surface
    </desc>
    <values>
      <value>T</value>
    </values>
  </entry>

  <entry id="hout(idbath)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>time-dependent bathymetry
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>


  <entry id="hout(idtvar)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>temperature and salinity   
    </desc>
    <values>
      <value>T, T</value>
    </values>
  </entry>

  <entry id="hout(idusms)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>surface U-stress 
    </desc>
    <values>
      <value>T</value>
    </values>
  </entry>

  <entry id="hout(idvsms)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>surface v-stress 
    </desc>
    <values>
      <value>T</value>
    </values>
  </entry>

  <entry id="hout(idubms)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>bottom U-stress 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idvbms)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>bottom V-stress 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idubrs)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> bottom U-current stress 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idvbrs)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> bottom V-current stress 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idubws)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> bottom U-wave stress 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idvbws)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> bottom V-wave stress 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idubcs)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> bottom max wave-current U-stress
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idvbcs)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> bottom max wave-current V-stress
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idubot)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>  bed wave orbital U-velocity  
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idvbot)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>  bed wave orbital V-velocity  
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idubur)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>   bottom U-velocity above bed
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idvbvr)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>   bottom V-velocity above bed
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idw2xx)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>   2D radiation stress, Sxx component  
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idw2xy)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>   2D radiation stress, Sxy component  
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idw2yy)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>   2D radiation stress, Syy component  
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idu2rs)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>    2D radiation U-stress     
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idu2sd)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>  2D U-Stokes velocity 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idv2sd)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>    2D V-Stokes velocity 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idw3xx)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>3D radiation stress, Sxx component     
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idw3xy)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>3D radiation stress, Sxy component     
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idw3yy)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>3D radiation stress, Syy component     
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idw3zx)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>3D radiation stress, Szx component     
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idw3zy)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>3D radiation stress, Szy component     
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idu3rs)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>3D U-radiation stress 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idv3rs)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>3D V-radiation stress 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idu3sd)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> 3D U-Stokes velocity  
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idv3sd)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> 3D V-Stokes velocity  
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idwamp)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> wave height
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idwlen)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> wave length
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idwdir)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> wave direction
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idwptp)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> wave surface period
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idwpbt)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> wave bottom period
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idworb)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> wave bottom orbital velocity
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idwdis)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>  wave dissipation 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idpair)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> surface air pressure 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(iduair)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>  surface U-wind component 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idvair)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> surface V-wind component
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(idtsur)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>  surface net heat and salt flux  
    </desc>
    <values>
      <value>T, T</value>
    </values>
  </entry>

  <entry id="hout(idlhea)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> latent heat flux   
    </desc>
    <values>
      <value>T</value>
    </values>
  </entry>
  <entry id="hout(idshea)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> sensible heat flux   
    </desc>
    <values>
      <value>T</value>
    </values>
  </entry>

  <entry id="hout(idlrad)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> longwave radiation flux   
    </desc>
    <values>
      <value>T</value>
    </values>
  </entry>

  <entry id="hout(idsrad)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>  shortwave radiation flux  
    </desc>
    <values>
      <value>T</value>
    </values>
  </entry>

  <entry id="hout(idempf)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>E-P flux  
    </desc>
    <values>
      <value>T</value>
    </values>
  </entry>
  <entry id="hout(idevap)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> evaporation rate 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="hout(idrain)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> precipitation rate    
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="hout(iddano)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> density anomaly 
    </desc>
    <values>
      <value>T</value>
    </values>
  </entry>

  <entry id="hout(idvvis)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> vertical viscosity 
    </desc>
    <values>
      <value>T</value>
    </values>
  </entry>
  <entry id="hout(idtdif)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> vertical T-diffusion  
    </desc>
    <values>
      <value>T</value>
    </values>
  </entry>
  <entry id="hout(idsdif)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> vertical Salinity diffusion  
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="hout(idhsbl)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> depth of surface boundary layer 
    </desc>
    <values>
      <value>T</value>
    </values>
  </entry>
  <entry id="hout(idhbbl)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> depth of bottom boundary layer 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="hout(idmtke)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>  turbulent kinetic energy 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="hout(idmtls)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>  turbulent length scale   
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="hout(inert)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> Logical switches (TRUE/FALSE) to activate writing of extra
    inert passive tracers other than biological and sediment
    tracers. An inert passive tracer is one that it is only advected
    and diffused. Other processes are ignored.  These tracers include,
    for example, dyes, pollutants, oil spills, etc.  NPT values are
    expected. However, these switches can be activated using compact
    parameter specification.
    </desc>
    <values>
      <value>F, F, F, F</value>
    </values>
  </entry>

  <entry id="hout(idbott)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>

    <desc> Logical switches (TRUE/FALSE) to activate writing of
    exposed sediment layer properties into HISTORY output file.
    Currently, MBOTP properties are expected for the bottom boundary
    layer and/or sediment models.
    </desc>
    <values>
      <value>F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F</value>
    </values>
  </entry>

<!-- Logical switches (TRUE/FALSE) to activate writing of time-averaged fields into AVERAGE output file. -->

  <entry id="aout(iduvel)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>3D u-velocity
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idvvel)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>3D v-velocity
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idwvel)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>3D w-velocity
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idovel)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>3D omega-velocity
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idubar)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>2D u-velocity
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idvbar)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>2D v-velocity
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idfsur)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>zeta free-surface
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idtvar)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>temperature and salinity   
    </desc>
    <values>
      <value>F, F</value>
    </values>
  </entry>

  <entry id="aout(idusms)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>surface U-stress 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idvsms)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>surface v-stress 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idubms)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>bottom U-stress 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idvbms)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>bottom V-stress 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idw2xx)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>   2D radiation stress, Sxx component  
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idw2xy)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>   2D radiation stress, Sxy component  
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idw2yy)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>   2D radiation stress, Syy component  
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idu2rs)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>    2D radiation U-stress     
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idu2sd)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>  2D U-Stokes velocity 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idv2sd)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>    2D V-Stokes velocity 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idw3xx)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>3D radiation stress, Sxx component     
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idw3xy)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>3D radiation stress, Sxy component     
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idw3yy)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>3D radiation stress, Syy component     
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idw3zx)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>3D radiation stress, Szx component     
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idw3zy)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>3D radiation stress, Szy component     
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idu3rs)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>3D U-radiation stress 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idv3rs)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>3D V-radiation stress 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idu3sd)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> 3D U-Stokes velocity  
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idv3sd)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> 3D V-Stokes velocity  
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idpair)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> surface air pressure 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(iduair)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>  surface U-wind component 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idvair)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> surface V-wind component
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idtsur)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>  surface net heat and salt flux  
    </desc>
    <values>
      <value>T, T</value>
    </values>
  </entry>

  <entry id="aout(idlhea)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> latent heat flux   
    </desc>
    <values>
      <value>T</value>
    </values>
  </entry>
  <entry id="aout(idshea)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> sensible heat flux   
    </desc>
    <values>
      <value>T</value>
    </values>
  </entry>

  <entry id="aout(idlrad)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> longwave radiation flux   
    </desc>
    <values>
      <value>T</value>
    </values>
  </entry>

  <entry id="aout(idsrad)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>  shortwave radiation flux  
    </desc>
    <values>
      <value>T</value>
    </values>
  </entry>

  <entry id="aout(idempf)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>E-P flux  
    </desc>
    <values>
      <value>T</value>
    </values>
  </entry>
  <entry id="aout(idevap)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> evaporation rate 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="aout(idrain)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> precipitation rate    
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="aout(iddano)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> density anomaly 
    </desc>
    <values>
      <value>T</value>
    </values>
  </entry>

  <entry id="aout(idvvis)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> vertical viscosity 
    </desc>
    <values>
      <value>T</value>
    </values>
  </entry>
  <entry id="aout(idtdif)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> vertical T-diffusion  
    </desc>
    <values>
      <value>T</value>
    </values>
  </entry>
  <entry id="aout(idsdif)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> vertical Salinity diffusion  
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="aout(idhsbl)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> depth of surface boundary layer 
    </desc>
    <values>
      <value>T</value>
    </values>
  </entry>
  <entry id="aout(idhbbl)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> depth of bottom boundary layer 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(id2drv)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> pvorticity_bar     2D relative vorticity 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="aout(id3drv)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> pvorticity         3D relative vorticity   
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="aout(id2dpv)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>rvorticity_bar     2D potential vorticity 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="aout(id3dpv)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>rvorticity         3D potential vorticity 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="aout(idu3dd)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>u_detided          detided 3D U-velocity
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idv3dd)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>v_detided          detided 3D V-velocity 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="aout(idu2dd)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>ubar_detided       detided 2D U-velocity
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="aout(idv2dd)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>vbar_detided       detided 2D V-velocity
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="aout(idfsud)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>zeta_detided       detided free-surface
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idtrcd)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>temp_detided, ...  detided temperature and salinity  
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idhuav)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Huon               u-volume flux, Huon   
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="aout(idhvav)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> v-volume flux, Hvom  
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="aout(iduuav)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>quadratic u*u term 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(iduvav)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>quadratic u*v term 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="aout(idvvav)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>quadratic v*v term
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="aout(idu2av)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>quadratic ubar*ubar term
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="aout(idv2av)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>quadratic vbar*vbar term
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="aout(idzzav)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> quadratic zeta*zeta term
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  
  <entry id="aout(idttav)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>temp2, salt2       quadratic t*t T/S terms
    </desc>
    <values>
      <value>F, F</value>
    </values>
  </entry>

  <entry id="aout(idutav)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Huontemp, ...      T/S volume flux, Huon*t
    </desc>
    <values>
      <value>F, F</value>
    </values>
  </entry>

  <entry id="aout(idvtav)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>vtemp, vsalt       quadratic v*t T/S terms  
    </desc>
    <values>
      <value>F, F</value>
    </values>
  </entry>

  <entry id="aout(idhutav)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Huontemp, ...      T/S volume flux, Huon*t
    </desc>
    <values>
      <value>F, F</value>
    </values>
  </entry>

  <entry id="aout(idhvtav)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Hvomtemp, ...      T/S volume flux, Hvom*t
    </desc>
    <values>
      <value>F, F</value>
    </values>
  </entry>

  <entry id="aout(inert)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> Logical switches (TRUE/FALSE) to activate writing of extra
    inert passive tracers other than biological and sediment
    tracers into the average file. 
    </desc>
    <values>
      <value>F, F, F, F</value>
    </values>
  </entry>

<!--  Logical switches (TRUE/FALSE) to activate writing of time-averaged,
 2D momentum (ubar,vbar) diagnostic terms into DIAGNOSTIC output file. -->

  <entry id="dout(m2rate)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>ubar_accel, ...    acceleration
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="dout(m2pgrd)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>ubar_prsgrd, ...   pressure gradient
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="dout(m2fcor)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>ubar_cor, ...      Coriolis force
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="dout(m2hadv)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>ubar_hadv, ...     horizontal total advection   
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="dout(m2xadv)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>ubar_xadv, ...     horizontal XI-advection 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="dout(m2yadv)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>ubar_yadv, ...     horizontal ETA-advection
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="dout(m2hrad)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>ubar_hrad, ...     horizontal total radiation stress
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="dout(m2hvis)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>ubar_hvisc, ...    horizontal total viscosity   
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="dout(m2xvis)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>ubar_xvisc, ...    horizontal XI-viscosity   
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="dout(m2yvis)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>ubar_yvisc, ...    horizontal ETA-viscosity 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="dout(m2sstr)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>ubar_sstr, ...     surface stress
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="dout(m2bstr)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>ubar_bstr, ...     bottom stress   
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

  <entry id="dout(m3rate)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>u_accel, ...       acceleration
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="dout(m3pgrd)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>u_prsgrd, ...   pressure gradient
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="dout(m3fcor)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>u_cor, ...      Coriolis force
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="dout(m3hadv)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>u_hadv, ...     horizontal total advection   
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="dout(m3xadv)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>u_xadv, ...     horizontal XI-advection 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="dout(m3yadv)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>u_yadv, ...     horizontal ETA-advection
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="dout(m3hrad)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>u_hrad, ...     horizontal total radiation stress
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="dout(m3vrad)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>u_vrad, ...        vertical radiation stress 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="dout(m3hvis)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>u_hvisc, ...       horizontal total viscosity
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="dout(m3xvis)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> u_xvisc, ...       horizontal XI-viscosity
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="dout(m3yvis)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>u_yvisc, ...       horizontal ETA-viscosity
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>
  <entry id="dout(m3vvis)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>u_vvisc, ...       vertical viscosity 
    </desc>
    <values>
      <value>F</value>
    </values>
  </entry>

<!-- Logical switches (TRUE/FALSE) to activate writing of
     time-averaged, active (temperature and salinity) and passive
     (inert) tracer diagnostic terms into DIAGNOSTIC output file:
     [1:NAT+NPT,Ngrids]. -->

  <entry id="dout(itrate)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>temp_rate, ...     time rate of change 
    </desc>
    <values>
      <value>F, F</value>
    </values>
  </entry>
  <entry id="dout(ithadv)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>temp_hadv, ...     horizontal total advection 
    </desc>
    <values>
      <value>F, F</value>
    </values>
  </entry>
  <entry id="dout(itxadv)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>temp_xadv, ...     horizontal XI-advection
    </desc>
    <values>
      <value>F, F</value>
    </values>
  </entry>
  <entry id="dout(ityadv)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>temp_yadv, ...     horizontal ETA-advection
    </desc>
    <values>
      <value>F, F</value>
    </values>
  </entry>
  <entry id="dout(itvadv)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>temp_vadv, ...     vertical advection 
    </desc>
    <values>
      <value>F, F</value>
    </values>
  </entry>
  <entry id="dout(ithdif)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>temp_hdiff, ...    horizontal total diffusion
    </desc>
    <values>
      <value>F, F, T, T, T, T</value>
    </values>
  </entry>
  <entry id="dout(itxdif)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> horizontal XI-diffusion    
    </desc>
    <values>
      <value>F, F</value>
    </values>
  </entry>
  <entry id="dout(itydif)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>horizontal ETA-diffusion   
    </desc>
    <values>
      <value>F, F</value>
    </values>
  </entry>
  <entry id="dout(itsdif)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>horizontal S-diffusion  
    </desc>
    <values>
      <value>F, F</value>
    </values>
  </entry>
  <entry id="dout(itvdif)">
    <type>logical(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>vertical diffusion 
    </desc>
    <values>
      <value>F, F, T, T, T, T</value>
    </values>
  </entry>

  <entry id="nuser">
    <type>integer</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> Generic User parameters
    </desc>
    <values>
      <value>0</value>
    </values>
  </entry>

  <entry id="user">
    <type>real</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> Generic User parameters
    </desc>
    <values>
      <value>0.0</value>
    </values>
  </entry>

  <entry id="nc_shuffle">
    <type>integer</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>  if non-zero, turn on shuffle filter  
    </desc>
    <values>
      <value>1</value>
    </values>
  </entry>

  <entry id="nc_deflate">
    <type>integer</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>  if non-zero, turn on deflate filter  
    </desc>
    <values>
      <value>1</value>
    </values>
  </entry>

  <entry id="nc_dlevel">
    <type>integer</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> deflate level [0-9]  
    </desc>
    <values>
      <value>1</value>
    </values>
  </entry>

  <entry id="grdname">
    <type>char(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Input NetCDF file names</desc>
    <values>
      <value ocn_grid="gom3">$DIN_LOC_ROOT/ocn/roms/gom3/gom03_grd_n050_md15m.nc</value>
      <value ocn_grid="g09g17">$DIN_LOC_ROOT/ocn/roms/gom09/gom09_v3_grd_200910.nc</value>
      <value ocn_grid="gs03t13">$DIN_LOC_ROOT/ocn/roms/gst03/gst03_v1_201120_grd.nc</value>
    </values>
  </entry>
 
  <entry id="ininame">
    <type>char(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>Input NetCDF file names</desc>
    <values>
      <value ocn_grid="gom3">$DIN_LOC_ROOT/ocn/roms/gom3/gom03_n050_md15m_ini_pop_jra55_20100101.nc</value>
      <value ocn_grid="g09g17">$DIN_LOC_ROOT/ocn/roms/gom09/gom09_v3_ini_pop_jra55_20100101.nc</value>
      <value ocn_grid="gs03t13">$DIN_LOC_ROOT/ocn/roms/gst03/gst03_v1_201120_ini_TL319_t13_Agrid_20100101.nc</value>
    </values>
  </entry>

  <entry id="itlname">
    <type>char(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> 
    </desc>
    <values>
      <value>/dev/null</value>
    </values>
  </entry>
  <entry id="irpname">
    <type>char(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> 
    </desc>
    <values>
      <value>/dev/null</value>
    </values>
  </entry>
  <entry id="iadname">
    <type>char(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> 
    </desc>
    <values>
      <value>/dev/null</value>
    </values>
  </entry>
  <entry id="clmname">
    <type>char(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> 
    </desc>
    <values>
      <value>/dev/null</value>
    </values>
  </entry>

  <entry id="bryname">
    <type>char(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> 
    </desc>
    <values>
      <value ocn_grid="gs03t13">$DIN_LOC_ROOT/ocn/roms/gst03/gst03_v1_201120_bry_TL319_t13_Agrid_2010.nc</value>
    </values>
  </entry>

  <entry id="fwdname">
    <type>char(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> 
    </desc>
    <values>
      <value>/dev/null</value>
    </values>
  </entry>

  <entry id="adsname">
    <type>char(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> 
    </desc>
    <values>
      <value>/dev/null</value>
    </values>
  </entry>

<!-- Input forcing NetCDF file name(s).  The USER has the option to
     enter several file names for each nested grid.  For example, the
     USER may have different files for wind products, heat fluxes,
     rivers, tides, etc.  The model will scan the file list and will
     read the needed data from the first file in the list containing
     the forcing field. Therefore, the order of the file names is very
     important. If using multiple forcing files per grid, first enter
     all the file names for grid 1, then grid 2, and so on.  It is
     also possible to split input data time records into several
     NetCDF file (see prologue instructions above). Use a single line
     per entry with a continuation (\) or vertical bar (|) symbol at
     the each entry, except the last one. -->

  <entry id="nffiles">
    <type>integer(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc>number of unique forcing files 
    </desc>
    <values>
      <value>8</value>
    </values>
  </entry>

  <entry id="frcname">
    <type>char(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> 
    </desc>
    <values>
      <value>
        ../input/CORE2_YYYY_lwrad_down.nc 
        ../input/CORE2_YYYY_Pair.nc 
        ../input/CORE2_YYYY_Qair.nc 
        ../input/CORE2_YYYY_Tair.nc 
        ../input/CORE2_YYYY_swrad.nc 
        ../input/CORE2_YYYY_rain.nc 
        ../input/CORE2_YYYY_Uwind.nc 
        ../input/CORE2_YYYY_Vwind.nc
      </value>
    </values>
  </entry>

  <entry id="gstname">
    <type>char(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> 
    </desc>
    <values>
      <value>output/gst03_gst.nc</value>
    </values>
  </entry>

  <entry id="rstname">
    <type>char(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> 
    </desc>
    <values>
      <value>output/gst03_rst.nc</value>
    </values>
  </entry>
  <entry id="hisname">
    <type>char(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> 
    </desc>
    <values>
      <value>output/gst03_his.nc</value>
    </values>
  </entry>

  <entry id="tlmname">
    <type>char(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> 
    </desc>
    <values>
      <value>output/gst03_tlm.nc</value>
    </values>
  </entry>

  <entry id="tlfname">
    <type>char(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> 
    </desc>
    <values>
      <value>output/gst03_tlf.nc</value>
    </values>
  </entry>

  <entry id="adjname">
    <type>char(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> 
    </desc>
    <values>
      <value>output/gst03_adj.nc</value>
    </values>
  </entry>

  <entry id="avgname">
    <type>char(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> 
    </desc>
    <values>
      <value>output/gst03_avg.nc</value>
    </values>
  </entry>

  <entry id="dianame">
    <type>char(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> 
    </desc>
    <values>
      <value>output/gst03_dia.nc</value>
    </values>
  </entry>

  <entry id="staname">
    <type>char(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> 
    </desc>
    <values>
      <value>output/gst03_sta.nc</value>
    </values>
  </entry>

  <entry id="fltname">
    <type>char(8)</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> 
    </desc>
    <values>
      <value>output/gst03_flt.nc</value>
    </values>
  </entry>

  <entry id="aparnam">
    <type>char</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> 
    </desc>
    <values>
      <value>../control/ROMS/External/s4dvar.in </value>
    </values>
  </entry>

  <entry id="sposnam">
    <type>char</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> 
    </desc>
    <values>
      <value>../control/ROMS/External/stations.in </value>
    </values>
  </entry>

  <entry id="fposnam">
    <type>char</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> 
    </desc>
    <values>
      <value>../control/ROMS/External/floats.in </value>
    </values>
  </entry>

  <entry id="bparnam">
    <type>char</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> 
    </desc>
    <values>
      <value>../control/ROMS/External/bio_Fennel.in </value>
    </values>
  </entry>

  <entry id="sparnam">
    <type>char</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> 
    </desc>
    <values>
      <value>../control/ROMS/External/sediment.in </value>
    </values>
  </entry>

  <entry id="usrname">
    <type>char</type>
    <category>roms</category>
    <group>ocean.in</group>
    <desc> 
    </desc>
    <values>
      <value>../control/ROMS/External/MyFile.dat</value>
    </values>
  </entry>

<!-- 
!
!  GLOSSARY:
!  =========
! ============================================================================ 
! Application title (string with a maximum of eighty characters) and
! C-preprocessing flag.
! ===========================================================================
!  TITLE       Application title.
!
!  MyAppCPP    Application C-preprocessing option.
!
!============================================================================================
! Variable information file name (string with a maximum of 256 characters).
!============================================================================================
!
!  VARNAME     Input/Output variable information file name.  This file needs to
!              be processed first so all information arrays and indices can be
!              initialized properly in "mod_ncparam.F".
!
!============================================================================================
! Nested grid parameters.
!============================================================================================
!
!  Ngrids      Number of nested grids. It needs to be read at the top of all
!              other parameters in order to allocate all model variables.
!
!============================================================================================
! Grid dimension parameters.
!============================================================================================
!
! These parameters are very important since they determine the grid of the
! application to solve. They need to be read first in order to dynamically
! allocate all model variables.
!
! WARNING: It is trivial and possible to change these dimension parameters in
!          idealized applications via analytical expressions.  However, in
! realistic applications any change to these parameters requires redoing all
! input NetCDF files.
!
!  Lm          Number of INTERIOR grid RHO-points in the XI-direction for
!                each nested grid, [1:Ngrids]. If using NetCDF files as
!                input, Lm=xi_rho-2 where "xi_rho" is the NetCDF file
!                dimension of RHO-points. Recall that all RHO-point
!                variables have a computational I-range of [0:Lm+1].
!
!  Mm          Number of INTERIOR grid RHO-points in the ETA-direction for
!                each nested grid, [1:Ngrids]. If using NetCDF files as
!                input, Mm=eta_rho-2 where "eta_rho" is the NetCDF file
!                dimension of RHO-points. Recall that all RHO-point
!                variables have a computational J-range of [0:Mm+1].
!
!  N           Number of vertical terrain-following levels at RHO-points,
!                [1:Ngrids].
!
!  Nbed        Number of sediment bed layers, [1:Ngrids]. This parameter
!                is only relevant if CPP option SEDIMENT is activated.
!
!                Mm+1  ___________________                _______  Kw = N
!                     |                   |              |       |
!                  Mm |   _____________   |              |       | Kr = N
!                     |  |             |  |              |_______|
!                     |  |             |  |              |       |
!                  Jr |  |             |  |              |       |
!                     |  |             |  |              |_______|
!                     |  |             |  |              |       |
!                   1 |  |_____________|  |              |       |
!                     |                   |              |_______|
!                   0 |___________________|              |       |
!                              Ir                        |       | 1
!                     0  1            Lm  Lm+1    h(i,j) |_______|
!                                                        ::::::::: 0
!                                                        :::::::::
!                                                        ::::::::: Nbed-1
!                                                        ::::::::: Nbed
!
!  NAT         Number of active tracer type variables. Usually, NAT=2 for
!                potential temperature and salinity.
!
!  NPT         Number of inert (dyes, age, etc) passive tracer type variables
!                to advect and diffuse only. This parameter is only relevant
!                if CPP option T_PASSIVE is activated.
!
!  NCS         Number of cohesive (mud) sediment tracer type variables. This
!                parameter is only relevant if CPP option SEDIMENT is
!                activated.
!
!  NNS         Number of non-cohesive (sand) sediment tracer type variables.
!                This parameter is only relevant if CPP option SEDIMENT is
!                activated.
!
!              The total number of sediment tracers is NST=NCS+NNS.  Notice
!              that NST must be greater than zero (NST>0).
!
!============================================================================================
! Domain tile partition parameters.
!============================================================================================
!
! Model tile decomposition parameters for serial and parallel configurations
! which are used to determine tile horizontal range indices (Istr,Iend) and
! (Jstr,Jend). In some computers, it is advantageous to have tile partitions
! in serial applications.
!
!  NtileI      Number of domain partitions in the I-direction (XI-coordinate).
!              It must be equal to or greater than one.
!
!  NtileJ      Number of domain partitions in the J-direction (ETA-coordinate).
!              It must be equal to or greater than one.
!
!  WARNING:    In shared-memory (OpenMP), the product of NtileI and NtileJ must
!              be a MULTIPLE of the number of parallel threads specified with
!              the OpenMP environmental variable OMP_NUM_THREADS.
!
!              In distributed-memory (MPI), the product of NtileI and NtileJ
!              must be EQUAL to the number of parallel nodes specified during
!              execution with the "mprun" or "mpirun" command.
!
!============================================================================================
! Lateral boundary conditions parameters.
!============================================================================================
!
! The lateral boundary conditions are now specified with logical switches
! instead of CPP flags to allow nested grid configurations. Their values are
! loaded into structured array:
!
!    LBC(1:4, nLBCvar, Ngrids)
!
! where 1:4 are the number of boundary edges, nLBCvar are the number LBC state
! variables, and Ngrids is the number of nested grids. For Example, to apply
! gradient boundary conditions we use:
!
!    LBC(iwest,  isFsur, ng) % gradient 
!    LBC(ieast,  ...   , ng) % gradient 
!    LBC(isouth, ...   , ng) % gradient 
!    LBC(inorth, ...   , ng) % gradient 
!
! The lateral boundary conditions are entered with a keyword. This keyword
! is case insensitive and usually has three characters. However, it is
! possible to have compound keywords, if applicable. For example, the
! keyword "RadNud" implies radiation boundary condition with nudging. This
! combination is usually used in active/passive radiation conditions.
!
!   Keyword    Lateral Boundary Condition Type
!
!   Cha        Chapman
!   Cla        Clamped
!   Clo        Closed
!   Fla        Flather                                _____N_____     j=Mm
!   Gra        Gradient                              |     4     |
!   Nes        Nested                                |           |
!   Nud        Nudging                             1 W           E 3
!   Per        Periodic                              |           |
!   Rad        Radiation                             |_____S_____|
!   Red        Reduced Physics                             2          j=1
!                                                   i=1         i=Lm
!
!  LBC(isFsur) Free-surface,  [1:4, Ngrids] values are expected.
!  LBC(isUbar) 2D U-momentum, [1:4, Ngrids] values are expected.
!  LBC(isVbar) 2D V-momentum, [1:4, Ngrids] values are expected.
!  LBC(isUvel) 3D U-momentum, [1:4, Ngrids] values are expected.
!  LBC(isVvel) 3D V-momentum, [1:4, Ngrids] values are expected.
!  LBC(isMtke) Mixing TKE,    [1:4, Ngrids] values are expected.
!  LBC(isTvar) Tracers,       [1:4, 1:NAT+NPT, Ngrids] values are expected.
!
! Similarly, the adjoint-based algorithms (ADM, TLM, RPM) can have different
! lateral boundary conditions keywords:
!
!  ad_LBC(isFsur) Free-surface,  [1:4, Ngrids] values are expected.
!  ad_LBC(isUbar) 2D U-momentum, [1:4, Ngrids] values are expected.
!  ad_LBC(isVbar) 2D V-momentum, [1:4, Ngrids] values are expected.
!  ad_LBC(isUvel) 3D U-momentum, [1:4, Ngrids] values are expected.
!  ad_LBC(isVvel) 3D V-momentum, [1:4, Ngrids] values are expected.
!  ad_LBC(isMtke) Mixing TKE,    [1:4, Ngrids] values are expected.
!  ad_LBC(isTvar) Tracers,       [1:4, 1:NAT+NPT, Ngrids] values are expected.
!
! Lateral open boundary edge volume conservation switch for nonlinear model
! and adjoint-based algorithm. Usually activated with radiation boundary
! conditions to enforce global mass conservation. Notice that these switches
! should not be activated if tidal forcing enabled, [1:Ngrids] values are
! expected.
! 
!  VolCons(west)       Western  boundary volume conservation switch.
!  VolCons(east)       Eastern  boundary volume conservation switch.
!  VolCons(south)      Southern boundary volume conservation switch.
!  VolCons(north)      Northern boundary volume conservation switch.
!
!  ad_VolCons(west)    Western  boundary volume conservation switch.
!  ad_VolCons(east)    Eastern  boundary volume conservation switch.
!  ad_VolCons(south)   Southern boundary volume conservation switch.
!  ad_VolCons(north)   Northern boundary volume conservation switch.

!============================================================================================
! Time-Stepping parameters.
!============================================================================================
!
!  NTIMES      Total number time-steps in current run.  If 3D configuration,
!              NTIMES is the total of baroclinic time-steps.  If only 2D
!              configuration, NTIMES is the total of barotropic time-steps.
!
!  DT          Time-Step size in seconds.  If 3D configuration, DT is the
!              size of the baroclinic time-step.  If only 2D configuration,
!              DT is the size of the barotropic time-step.
!
!  NDTFAST     Number of barotropic time-steps between each baroclinic time
!              step. If only 2D configuration, NDTFAST should be unity since
!              there is no need to split time-stepping.
!
!============================================================================================
! Model iteration loops parameters.
!============================================================================================
!
!  ERstr       Starting ensemble run (perturbation or iteration) number.
!
!  ERend       Ending   ensemble run (perturbation or iteration) number.
!
!  Nouter      Maximum number of 4DVAR outer loop iterations.
!
!  Ninner      Maximum number of 4DVAR inner loop iterations.
!
!  Nintervals  Number of time interval divisions for Stochastic Optimals
!              computations. It must be a multiple of NTIMES. The tangent
!              linear model (TLM) and the adjoint model (ADM) are integrated
!              forward and backward at different intervals.  For example,
!              if Nintervals=3,
!
!              1               NTIMES/3         2*NTIMES/3           NTIMES
!              +..................+..................+..................+
!              <========================================================> (1)
!                                 <=====================================> (2)
!                                                    <==================> (3)
!
!              In the first iteration (1), the TLM is integrated forward from
!              1 to NTIMES and the ADM is integrated backward from NTIMES to 1.
!              In the second iteration (2), the TLM is integrated forward from
!              NTIMES/3 to NTIMES and the ADM is integrated backward from
!              NTIMES to NTIMES/3. And so on.
!
!============================================================================================
!  Eigenproblem parameters.
!============================================================================================
!
!  NEV         Number of eigenvalues to compute for the Lanczos/Arnoldi
!              problem.  Notice that the model memory requirement increases
!              substantially as NEV increases.  The GST requires NEV+1
!              copies of the model state vector.  The memory requirements
!              are decreased in distributed-memory applications.
!
!  NCV         Number of eigenvectors to compute for the Lanczos/Arnoldi
!              problem. NCV must be greater than NEV.
!
!  At present, there is no a-priori analysis to guide the selection of NCV
!  relative to NEV.  The only formal requirement is that NCV > NEV. However
!  in optimal perturbations, it is recommended to have NCV greater than or
!  equal to 2*NEV. In Finite Time Eigenmodes (FTE) and Adjoint Finite Time
!  Eigenmodes (AFTE) the requirement is to have NCV greater than or equal to
!  2*NEV+1.
!
!  The efficiency of calculations depends critically on the combination of
!  NEV and NCV.  If NEV is large (greater than 10 say), you can use NCV=2*NEV+1
!  but for NEV small (less than 6) it will be inefficient to use NCV=2*NEV+1.
!  In complicated applications, you can start with NEV=2 and NCV=10. Otherwise,
!  it will iterate for a very long time.
!
!============================================================================================
! Input/Output parameters.
!============================================================================================
!
!  NRREC       Switch to indicate re-start from a previous solution.  Use
!              NRREC=0 for new solutions. In a re-start solution, NRREC
!              is the time index of the re-start NetCDF file assigned for
!              initialization.  If NRREC is negative (say NRREC=-1), the
!              model will re-start from the most recent time record. That
!              is, the initialization record is assigned internally.
!              Notice that it is also possible to re-start from a history
!              or time-averaged NetCDF file.  If a history file is used
!              for re-start, it must contains all the necessary primitive
!              variables at all levels.
!
!  LcycleRST   Logical switch (T/F) used to recycle time records in output
!              re-start file.  If TRUE,  only the latest two re-start time
!              records are maintained.  If FALSE, all re-start fields are
!              saved every NRST time-steps without recycling.  The re-start
!              fields are written at all levels in double precision.
!
!  NRST        Number of time-steps between writing of re-start fields.
!
!  NSTA        Number of time-steps between writing data into stations file.
!              Station data is written at all levels.
!
!  NFLT        Number of time-steps between writing data into floats file.
!
!  NINFO       Number of time-steps between print of single line information
!              to standard output.  It also determines the interval between
!              computation of global energy diagnostics.
!
!============================================================================================
!  Output history and average files parameters.
!============================================================================================
!
!  LDEFOUT     Logical switch (T/F) used to create new output files when
!              initializing from a re-start file, abs(NRREC) > 0.  If TRUE
!              and applicable, a new history, average, diagnostic and
!              station files are created during the initialization stage.
!              If FALSE and applicable, data is appended to existing
!              history, average, diagnostic and station files.  See also
!              parameters NDEFHIS, NDEFAVG and NDEFDIA below.
!
!  NHIS        Number of time-steps between writing fields into history file.
!
!  NDEFHIS     Number of time-steps between the creation of new history file.
!              If NDEFHIS=0, the model will only process one history file.
!              This feature is useful for long simulations when history files
!              get too large; it creates a new file every NDEFHIS time-steps.
!
!  NTSAVG      Starting time-step for the accumulation of output time-averaged
!              data.
!
!  NAVG        Number of time-steps between writing time-averaged data
!              into averages file.  Averaged date is written for all fields.
!
!  NDEFAVG     Number of time-steps between the creation of new average
!              file.  If NDEFAVG=0, the model will only process one average
!              file.  This feature is useful for long simulations when
!              average files get too large; it creates a new file every
!              NDEFAVG time-steps.
!
!  NTSDIA      Starting time-step for the accumulation of output time-averaged
!              diagnostics data.
!
!  NDIA        Number of time-steps between writing time-averaged diagnostics
!              data into diagnostics file.  Averaged date is written for all
!              fields.
!
!  NDEFDIA     Number of time-steps between the creation of new time-averaged
!              diagnostics file.  If NDEFDIA=0, the model will only process one
!              diagnostics file.  This feature is useful for long simulations
!              when diagnostics files get too large; it creates a new file
!              every NDEFDIA time-steps.
!
!============================================================================================
!  Output tangent linear and adjoint model parameters.
!============================================================================================
!
!  LcycleTLM   Logical switch (T/F) used to recycle time records in output
!              tangent linear file.  If TRUE, only the latest two time
!              records are maintained.  If FALSE, all tangent linear fields
!              are saved every NTLM time-steps without recycling.
!
!  NTLM        Number of time-steps between writing fields into tangent linear
!              model file.
!
!  NDEFTLM     Number of time-steps between the creation of new tangent linear
!              file. If NDEFTLM=0, the model will only process one tangent
!              linear file. This feature is useful for long simulations when
!              output NetCDF files get too large; it creates a new file every
!              NDEFTLM time-steps.
!
!  LcycleADJ   Logical switch (T/F) used to recycle time records in output
!              adjoint file.  If TRUE, only the latest two time records are
!              maintained.  If FALSE, all tangent linear fields re saved
!              every NADJ time-steps without recycling.
!
!  NADJ        Number of time-steps between writing fields into adjoint model
!              file.
!
!  NDEFADJ     Number of time-steps between the creation of new adjoint file.
!              If NDEFADJ=0, the model will only process one adjoint file.
!              This feature is useful for long simulations when output NetCDF
!              files get too large; it creates a new file every NDEFADJ
!              time-steps.
!
!  NSFF        Number of time-steps between 4DVAR adjustment of surface forcing
!              fluxes. In strong constraint 4DVAR, it is possible to adjust
!              surface forcing at other time intervals in addition to initial
!              time.  This parameter is used to store the appropriate number
!              of surface forcing records in the output history NetCDF files:
!              1+NTIMES/NSFF records. NSFF must be a factor of NTIMES or
!              greater than NTIMES. If NSFF > NTIMES, only one record is
!              stored in the NetCDF files and the adjustment is for constant
!              forcing with constant correction. This parameter is only
!              relevant in 4DVAR when activating either ADJUST_STFLUX or
!              ADJUST_WSTRESS.
!
!  NOBC        Number of time-steps between 4DVAR adjustment of open boundary
!              fields. In strong constraint 4DVAR, it is possible to adjust
!              open boundaries at other time intervals in addition to initial
!              time.  This parameter is used to store the appropriate number
!              of open boundary records in the output history NetCDF files:
!              1+NTIMES/NOBC records. NOBC must be a factor of NTIMES or
!              greater than NTIMES. If NOBC > NTIMES, only one record is
!              stored in the NetCDF files and the adjustment is for constant
!              forcing with constant correction. This parameter is only
!              relevant in 4DVAR when activating ADJUST_BOUNDARY.
!
!============================================================================================
!  Generalized Stability Theory (GST) analysis parameters.
!============================================================================================
!
!  LmultiGST   Logical switch (TRUE/FALSE) to write out one GST analysis
!              eigenvector per history file.
!
!  LrstGST     Logical switch (TRUE/FALSE) to restart GST analysis. If TRUE,
!              the check pointing data is read in from the GST restart NetCDF
!              file.  If FALSE and applicable, the check pointing GST data is
!              saved and overwritten every NGST iterations of the algorithm.
!
!  MaxIterGST  Maximum number of GST algorithm iterations.
!
!  NGST        Number of GST iterations between storing of check pointing
!              data into NetCDF file. The restart data is always saved if
!              MaxIterGST is reached without convergence. It is also saved
!              when convergence is achieved. It is always a good idea to
!              save the check pointing data at regular intervals so there
!              is a mechanism to recover from an unexpected interruption
!              in this very expensive computation. The check pointing data
!              can be used also to recompute the Ritz vectors by changing
!              some of the parameters, like convergence criteria (Ritz_tol)
!              and number of Arnoldi iterations (iparam(3)).
!
!  Ritz_tol    Relative accuracy of the Ritz values computed in the GST
!              analysis.
!
!============================================================================================
! Harmonic/Biharmonic horizontal diffusion for active tracers.
!============================================================================================
!
!  TNU2        Nonlinear model lateral, harmonic, constant, mixing
!              coefficient (m2/s) for active (NAT) and inert (NPT) tracer
!              variables. If variable horizontal diffusion is activated,
!              TNU2 is the mixing coefficient for the largest grid-cell
!              in the domain.
!
!  TNU4        Nonlinear model lateral, biharmonic, constant, mixing
!              coefficient (m4/s) for active (NAT) and inert (NPT) tracer
!              variables. If variable horizontal diffusion is activated,
!              TNU4 is the mixing coefficient for the largest grid-cell
!              in the domain.
!
!  ad_TNU2     Adjoint-based algorithms lateral, harmonic, constant, mixing
!              coefficient (m2/s) for active (NAT) and inert (NPT) tracer
!              variables. If variable horizontal diffusion is activated,
!              ad_TNU2 is the mixing coefficient for the largest grid-cell
!              in the domain. In some applications, a larger value than
!              that used in the nonlinear model (basic state) is necessary
!              for stability.
!
!  ad_TNU4     Adjoint-based algorithms lateral, biharmonic, constant, mixing
!              coefficient (m4/s) for active (NAT) and inert (NPT) tracer
!              variables. If variable horizontal diffusion is activated,
!              ad_TNU4 is the mixing coefficient for the largest grid-cell
!              in the domain. In some applications, a larger value than
!              that used in the nonlinear model (basic state) is necessary
!              for stability.
!
!============================================================================================
! Harmonic/biharmonic horizontal viscosity coefficients.
!============================================================================================
!
!  VISC2       Nonlinear model lateral, harmonic, constant, mixing
!              coefficient (m2/s) for momentum. If variable horizontal
!              viscosity is activated, UVNU2 is the mixing coefficient
!              for the largest grid-cell in the domain.
!
!  VISC4       Nonlinear model lateral, biharmonic, constant mixing
!              coefficient (m4/s) for momentum. If variable horizontal
!              viscosity is activated, UVNU4 is the mixing coefficient
!              for the largest grid-cell in the domain.
!
!  ad_VISC2    Adjoint-based algorithms lateral, harmonic, constant, mixing
!              coefficient (m2/s) for momentum. If variable horizontal
!              viscosity is activated, ad_UVNU2 is the mixing coefficient
!              for the largest grid-cell in the domain. In some applications,
!              a larger value than that used in the nonlinear model (basic
!              state) is necessary for stability.
!
!  ad_VISC4    Adjoint-based algorithms lateral, biharmonic, constant mixing
!              coefficient (m4/s) for momentum. If variable horizontal
!              viscosity is activated, ad_UVNU4 is the mixing coefficient
!              for the largest grid-cell in the domain. In some applications,
!              a larger value than that used in the nonlinear model (basic
!              state) is necessary for stability.
!
!============================================================================================
! Vertical mixing coefficients for active tracers.
!============================================================================================
!
!  AKT_BAK     Background vertical mixing coefficient (m2/s) for active
!              (NAT) and inert (NPT) tracer variables.
!
!  ad_AKT_fac  Adjoint-based algorithms vertical mixing, basic state, scale
!              factor (nondimensional) for active (NAT) and inert (NPT)
!              tracer variables. In some applications, a smaller/larger
!              values of vertical mixing are necessary for stability. It
!              is only used when FORWARD_MIXING is activated.
!
!============================================================================================
! Vertical mixing coefficient for momentum.
!============================================================================================
!
!  AKV_BAK     Background vertical mixing coefficient (m2/s) for momentum.
!
!  ad_AKV_fac  Adjoint-based algorithms vertical mixing, basic state, scale
!              factor (nondimensional) for momentum. In some applications,
!              a smaller/larger values of vertical mixing are necessary for
!              stability. It is only used when FORWARD_MIXING is activated.
!
!============================================================================================
! Turbulent closure parameters.
!============================================================================================
!
!  AKK_BAK     Background vertical mixing coefficient (m2/s) for turbulent
!              kinetic energy.
!
!  AKP_BAK     Background vertical mixing coefficient (m2/s) for turbulent
!              generic statistical field, "psi".
!
!  TKENU2      Lateral, harmonic, constant, mixing coefficient (m2/s) for
!              turbulent closure variables.
!
!  TKENU4      Lateral, biharmonic, constant mixing coefficient (m4/s) for
!              turbulent closure variables.
!
!============================================================================================
! Generic length-scale turbulence closure parameters.
!============================================================================================
!
!  GLS_P       Stability exponent (non-dimensional).
!
!  GLS_M       Turbulent kinetic energy exponent (non-dimensional).
!
!  GLS_N       Turbulent length scale exponent (non-dimensional).
!
!  GLS_Kmin    Minimum value of specific turbulent kinetic energy
!
!  GLS_Pmin    Minimum Value of dissipation.
!
! Closure independent constraint parameters (non-dimensional):
!
!  GLS_CMU0    Stability coefficient.
!
!  GLS_C1      Shear production coefficient.
!
!  GLS_C2      Dissipation coefficient.
!
!  GLS_C3M     Buoyancy production coefficient (minus).
!
!  GLS_C3P     Buoyancy production coefficient (plus).
!
!  GLS_SIGK    Constant Schmidt number (non-dimensional) for turbulent
!              kinetic energy diffusivity.
!
!  GLS_SIGP    Constant Schmidt number (non-dimensional) for turbulent
!              generic statistical field, "psi".
!
! Suggested values for various parameterizations:
!
!              k-kl         k-epsilon    k-omega      gen
!
!      GLS_P = 0.d0          3.0d0       -1.0d0        2.0d0
!      GLS_M = 1.d0          1.5d0        0.5d0        1.0d0
!      GLS_N = 1.d0         -1.0d0       -1.0d0       -0.67d0
!   GLS_Kmin = 5.0d-6        7.6d-6       7.6d-6       1.0d-8
!   GLS_Pmin = 5.0d-6        1.0d-12      1.0d-12      1.0d-8
!
!   GLS_CMU0 = 0.5544d0      0.5477d0     0.5477d0     0.5544d0
!     GLS_C1 = 0.9d0         1.44d0       0.555d0      1.00d0
!     GLS_C2 = 0.52d0        1.92d0       0.833d0      1.22d0
!    GLS_C3M = 2.5d0        -0.4d0       -0.6d0        0.1d0
!    GLS_C3P = 1.0d0         1.0d0        1.0d0        1.0d0
!   GLS_SIGK = 1.96d0        1.0d0        2.0d0        0.8d0
!   GLS_SIGP = 1.96d0        1.30d0       2.0d0        1.07d0
!
!============================================================================================
! Constants used in the various formulations of surface turbulent kinetic
! energy flux in the GLS.
!============================================================================================
!
!  CHARNOK_ALPHA   Charnok surface roughness,
!                    Zos:   (charnok_alpha * u_star**2) / g
!
!  ZOS_HSIG_ALPHA  Roughness from wave amplitude,
!                    Zos:   zos_hsig_alpha * Hsig
!
!  SZ_ALPHA        Surface flux from wave dissipation,
!                    flux:  dt * sz_alpha * Wave_dissip
!
!  CRGBAN_CW       Surface flux due to Craig and Banner wave breaking,
!                    flux:  dt * crgban_cw * u_star**3
!
!============================================================================================
! Constants used in the computation of momentum stress.
!============================================================================================
!
!  RDRG        Linear bottom drag coefficient (m/s).
!
!  RDRG2       Quadratic bottom drag coefficient.
!
!  Zob         Bottom roughness (m).
!
!  Zos         Surface roughness (m).
!
!============================================================================================
! Height of atmospheric measurements for bulk fluxes parameterization.
!============================================================================================
!
!  BLK_ZQ      Height (m) of surface air humidity measurement. Usually,
!                recorded at 10 m.
!
!  BLK_ZT      Height (m) of surface air temperature measurement. Usually,
!                recorded at 2 or 10 m.
!
!  BLK_ZW      Height (m) of surface winds measurement. Usually, recorded
!                at 10 m.
!
!============================================================================================
! Wetting and drying parameters.
!============================================================================================
!
!  DCRIT       Minimum depth (m) for wetting and drying.
!
!============================================================================================
! Jerlow Water type.
!============================================================================================
!
!  WTYPE       Jerlov water type: an integer value from 1 to 5.
!
!============================================================================================
! Body-force parameters. Used when CPP option BODYFORCE is activated.
!============================================================================================
!
!  LEVSFRC     Deepest level to apply surface momentum stress as a body-force.
!
!  LEVBFRC     Shallowest level to apply bottom momentum stress as a body-force.
!
!============================================================================================
! Vertical S-coordinates parameters.
!============================================================================================
!
! The parameters below must be consistent in all input fields associated with
! the vertical grid.  The same vertical grid transformation (depths) needs to
! be used when preparing initial conditions, boundary conditions, climatology,
! observations, and so on. Please check:
!
!   https://www.myroms.org/wiki/index.php/Vertical_S-coordinate
!
! for details, rules and examples.
!
!
!  Vtransform  Vertical transformation equation:
!
!                (1) Original formulation (Shchepetkin and McWilliams, 2005),
!                    Vtransform=1 (In ROMS since 1999)
!
!                      z(x,y,s,t)=Zo(x,y,s)+zeta(x,y,t)*[1+Zo(x,y,s)/h(x,y)]
!
!                    where
!
!                      Zo(x,y,s)=hc*s+[h(x,y)-hc]*C(s)
!
!                (2) Improved formulation (A. Shchepetkin, 2005),
!                    Vtransform=2
!
!                      z(x,y,s,t)=zeta(x,y,t)*[zeta(x,y,t)+h(x,y)]*Zo(x,y,s)
!
!                    where
!
!                      Zo(x,y,s)=[hc*s(k)+h(x,y)*C(k)]/[hc+h(x,y)]
!
!                    The true sigma-coordinate system is recovered as hc goes
!                    to INFINITY. This is useful when configuring applications
!                    with flat bathymetry and uniform level thickness.
!                    Practically, you can achieve this by setting:
!
!                      THETA_S = 0.0d0
!                      THETA_B = 0.0d0
!                      TCLINE  = 1.0d+17       (a large number)
!
!
!  Vstretching Vertical stretching function, C(s):
!
!                (1) Original function (Song and Haidvogel, 1994),
!                    Vstretching=1
!
!                    C(s)=(1-theta_b)*[SINH(s*theta_s)/SINH(theta_s)]+
!                         theta_b*[-0.5+0.5*TANH(theta_s*(s+0.5))/
!                                           TANH(0.5*theta_s)]
!
!                (2) A. Shchepetkin (2005) function,
!                    Vstretching=2
!
!                      C(s)=Cweight*Csur(s)+(1-Cweight)*Cbot(s)
!
!                    where
!
!                      Csur(s)=[1-COSH(theta_s*s)]/[COSH(theta_s)-1]
!
!                      Cbot(s)=-1+[1-SINH(theta_b*(s+1))]/SINH(theta_b)
!
!                      Cweight=(s+1)**alpha*
!                              (1+(alpha/beta)*(1-(s+1)**beta))
!
!                (3) R. Geyer function for shallow sediment applications,
!                    Vstretching=3
!
!                      C(s)=Cweight*Cbot(s)+(1-Cweight)*Csur(s)
!
!                    where
!
!                      Csur(s)=-LOG(COSH(Hscale*ABS(s)** alpha))/
!                               LOG(COSH(Hscale))
!
!                      Cbot(s)= LOG(COSH(Hscale*(s+1)** beta))/
!                               LOG(COSH(Hscale))-1
!
!                      Cweight=0.5*(1-TANH(Hscale*(s+0.5))
!
!                (4) A. Shchepetkin (2010) improved double stretching function,
!                    Vstretching=4
!
!                      C(s)=[1-COSH(theta_s*s)]/[COSH(theta_s)-1]
!
!                    with bottom refinement
!
!                      C(s)=[EXP(theta_b*C(s))-1]/[1-EXP(-theta_b)]
!
!                    The resulting double transformation is continuous with
!                    respect control parameters theta_s and theta_b with a
!                    meaningful range of:
!
!                      0 <  theta_s <= 10.0
!                      0 <= theta_b <=  4.0
!
!              Many other stretching functions (Vstretching>4) are possible
!              provided that:
!
!                * C(s) is a dimensionless, nonlinear, monotonic function.
!                * C(s) is a continuous differentiable function, or
!                  a differentiable piecewise function with smooth transition.
!                * The stretching vertical coordinate ,s, is constrained
!                  between -1 <= s <= 0, with s=0 corresponding to the
!                  free-surface and s=-1 corresponding to the bathymetry.
!                * Similarly, the stretching function, C(s), is constrained
!                  between -1 <= C(s) <= 0, with C(0)=0 corresponding to the
!                  free-surface and C(-1)=-1 corresponding to the bathymetry.
!
!              These functions are coded in routine "Utility/set_scoord.F".
!
! Due to its functionality and properties, the default and recommended vertical
! coordinates transformation is:
!
!              Vtransform  = 2
!              Vstretching = 4
!
!
!  THETA_S     S-coordinate surface control parameter. The range of optimal
!              values depends on the vertical stretching function, C(s).
!
!  THETA_B     S-coordinate bottom  control parameter. The range of optimal
!              values depends on the vertical stretching function, C(s).
!
!  TCLINE      Critical depth (hc) in meters (positive) controlling the
!              stretching. It can be interpreted as the width of surface or
!              bottom boundary layer in which higher vertical resolution
!              (levels) is required during stretching.
!
!============================================================================================
! Mean Density and background Brunt-Vaisala frequency.
!============================================================================================
!
!  RHO0        Mean density (Kg/m3) used when the Boussinesq approximation
!              is inferred.
!
!  BVF_BAK     Background Brunt-Vaisala frequency squared (1/s2). Typical
!              values for the ocean range (as a function of depth) from
!              1.0E-4 to 1.0E-6.
!
!============================================================================================
! Time Stamps.
!============================================================================================
!
!  DSTART      Time stamp assigned to model initialization (days).  Usually
!              a Calendar linear coordinate, like modified Julian Day.  For
!              Example:
!
!                       Julian Day = 1  for  Nov 25, 0:0:0 4713 BCE
!              modified Julian Day = 1  for  May 24, 0:0:0 1968  CE GMT
!
!              It is called truncated or modified Julian day because an offset
!              of 2440000 needs to be added.
!
!  TIDE_START  Reference time origin for tidal forcing (days). This is the
!              time used when processing input tidal model data. It is needed
!              in routine "set_tides" to compute the correct phase lag with
!              respect ROMS/TOMS initialization time.
!
!  TIME_REF    Reference time (yyyymmdd.f) used to compute relative time:
!              elapsed time interval since reference-time.  The "units"
!              attribute takes the form "time-unit since reference-time".
!              This parameter also provides information about the calendar
!              used:
!
!              If TIME_REF = -2, model time and DSTART are in modified Julian
!              days units.  The "units" attribute is:
!
!                      'time-units since 1968-05-23 00:00:00 GMT'
!
!              If TIME_REF = -1, model time and DSTART are in a calendar
!              with 360 days in every year (30 days each month).  The "units"
!              attribute is:
!
!                      'time-units since 0001-01-01 00:00:00'
!
!              If TIME_REF = 0, model time and DSTART are in a common year
!              calendar with 365.25 days.  The "units" attribute is:
!
!                      'time-units since 0001-01-01 00:00:00'
!
!              If TIME_REF > 0, model time and DSTART are the elapsed time
!              units since specified reference time.  For example,
!              TIME_REF=20020115.5 will yield the following attribute:
!
!                      'time-units since 2002-01-15 12:00:00'
!
!============================================================================================
! Nudging/relaxation time scales, inverse scales will be computed internally.
!============================================================================================
!
! When passive/active open boundary conditions are activated, these nudging
! values correspond to the passive (outflow) nudging time scales.
!
!  TNUDG       Nudging time scale (days) for active tracer variables.
!              (1:NAT+NPT,1:Ngrids) values are expected.
!
!  ZNUDG       Nudging time scale (days) for free-surface.
!
!  M2NUDG      Nudging time scale (days) for 2D momentum.
!
!  M3NUDG      Nudging time scale (days) for 3D momentum.
!
!  OBCFAC      Factor between passive (outflow) and active (inflow) open
!              boundary conditions.  The nudging time scales for the
!              active (inflow) conditions are obtained by multiplying
!              the passive values by OBCFAC. If OBCFAC > 1, nudging on
!              inflow is stronger than on outflow (recommended).
!
!============================================================================================
! Linear equation of State parameters.
!============================================================================================
!
! Ignoring pressure, the linear equation of state is:
!
!              rho(:,:,:) = R0 - R0 * TCOEF * (t(:,:,:,:,itemp) - T0)
!                              + R0 * SCOEF * (t(:,:,:,:,isalt) - S0)
!
!              Typical values:     R0 = 1027.0  kg/m3
!                                  T0 = 10.0    Celsius
!                                  S0 = 35.0    PSU
!                               TCOEF = 1.7d-4  1/Celsius
!                               SCOEF = 7.6d-4  1/PSU
!
!  R0          Background density value (Kg/m3) used in Linear Equation of
!              State.
!
!  T0          Background potential temperature (Celsius) constant.
!
!  S0          Background salinity (PSU) constant.
!
!  TCOEF       Thermal expansion coefficient in Linear Equation of State.
!
!  SCOEF       Saline contraction coefficient in Linear Equation of State.
!
!============================================================================================
! Slipperiness parameter.
!============================================================================================
!
!  GAMMA2      Slipperiness variable, either 1.0 (free slip) or -1.0 (no slip).
!
!============================================================================================
!  Tracer point Sources/Sink sources switches.
!============================================================================================
!
!  LtracerSrc  Logical switches (T/F) to specify which tracer variables
!              to consider when the option TS_PSOURCE is activated. Only
!              NAT active tracers (temperature, salinity) and NPT inert
!              tracers need to be specified here:
!
!                LtracerSrc(itemp,ng)     for temperature (itemp=1)
!                LtracerSrc(isalt,ng)     for salinity    (isalt=2)
!                LtracerSrc(NAT+1,ng)     for inert tracer 1
!                ...                      ...
!                LtracerSrc(NAT+NPT,ng)   for inert tracer NPT
!
!              Other biological and sediment tracers switches are specified in
!              their respective input scripts.
!
!              Recall that TS_PSOURCE is usually activated to add river runoff
!              as a point source. At minimum, it is necessary to specify both
!              temperature and salinity for all rivers.  The other tracers are
!              optional.
!
!              This logical switch REPLACES and ELIMINATES the need to have
!              or read the variable "river_flag(river)" in the input rivers
!              forcing NetCDF file:
!
!                double river_flag(river)
!                        river_flag:long_name = "river runoff tracer flag"
!                        river_flag:option_0 = "all tracers are off"
!                        river_flag:option_1 = "only temperature"
!                        river_flag:option_2 = "only salinity"
!                        river_flag:option_3 = "both temperature and salinity"
!                        river_flag:units = "nondimensional"
!
!              This logic was too cumbersome and complicated when additional
!              tracers are considered. However, this change is backward
!              compatible.
!
!              The LtracerSrc switch will be used to activate the reading of
!              respective tracer variable from input river forcing NetCDF
!              file. If you want to add other tracer variables (other than
!              temperature and salinity) as a source for a particular river(s),
!              you just need to specify such values on those river(s). Then,
!              set the values to ZERO on the other river(s) that do NOT
!              require such river forcing for that tracer. Recall that you
!              need to specify the tracer values for all rivers, even if
!              their values are zero.
!
!============================================================================================
!  Adjoint sensitivity parameters.
!============================================================================================
!
!  DstrS       Starting day for adjoint sensitivity forcing.
!
!  DendS       Ending   day for adjoint sensitivity forcing.
!
!              The adjoint forcing is applied at every time step according to
!              desired state functional stored in the adjoint sensitivity
!              NetCDF file. DstrS must be less than or equal to DendS. If both
!              values are zero, their values are reset internally to the full
!              range of the adjoint integration.
!
!  KstrS       Starting vertical level of the 3D adjoint state variables whose
!                sensitivity is required.
!  KendS       Ending   vertical level of the 3D adjoint state variables whose
!                sensitivity is required.
!
!  Lstate      Logical switches (TRUE/FALSE) to specify the adjoint state
!                variables whose sensitivity is required.
!
!                Lstate(isFsur):   Free-surface
!                Lstate(isUbar):   2D U-momentum
!                Lstate(isVbar):   2D V-momentum
!                Lstate(isUvel):   3D U-momentum
!                Lstate(isVvel):   3D V-momentum
!                Lstate(isTvar):   Traces (NT values expected)
!
!============================================================================================
!  Forcing Singular Vectors or Stochastic Optimals parameters.
!============================================================================================
!
!  Fstate      Logical switches (TRUE/FALSE) to specify state variables for
!                which Forcing Singular Vectors or Stochastic Optimals is
!                required.
!
!                Fstate(isFsur):   Free-surface
!                Fstate(isUbar):   2D U-momentum
!                Fstate(isVbar):   2D V-momentum
!                Fstate(isUvel):   3D U-momentum
!                Fstate(isVvel):   3D V-momentum
!                Fstate(isTvar):   Traces (NT values expected)
!
!                Fstate(isUstr):   surface U-stress
!                Fstate(isVstr):   surface V-stress
!                Fstate(isTsur):   surface tracers flux (NT values expected)
!
!  SO_decay    Stochastic Optimals time decorrelation scale (days) assumed
!                for red noise processes.
!
!  SO_sdev     Stochastic Optimals surface forcing standard deviation for
!                dimensionalization.
!
!                SO_sdev(isFsur):  Free-surface
!                SO_sdev(isUbar):  2D U-momentum
!                SO_sdev(isVbar):  2D V-momentum
!                SO_sdev(isUvel):  3D U-momentum
!                SO_sdev(isVvel):  3D V-momentum
!                SO_sdev(isTvar):  Traces (NT values expected)
!
!                SO_sdev(isUstr):  surface U-stress
!                SO_sdev(isVstr):  surface V-stress
!                SO_sdev(isTsur):  surface tracer flux (NT values expected)
!
!============================================================================================
! Logical switches (T/F) to activate writing of instantaneous fields into
! HISTORY file.
!============================================================================================
!
!  Hout(idUvel)  Write out 3D U-velocity component.
!  Hout(idVvel)  Write out 3D V-velocity component.
!  Hout(idWvel)  Write out 3D W-velocity component.
!  Hout(idOvel)  Write out 3D omega vertical velocity.
!  Hout(idUbar)  Write out 2D U-velocity component.
!  Hout(idVbar)  Write out 2D V-velocity component.
!  Hout(idFsur)  Write out free-surface.
!  Hout(idBath)  Write out time-dependent bathymetry.
!
!  Hout(idTvar)  Write out active (NAT) tracers: temperature and salinity.
!
!  Hout(idUsms)  Write out surface U-momentum stress.
!  Hout(idVsms)  Write out surface V-momentum stress.
!  Hout(idUbms)  Write out bottom  U-momentum stress.
!  Hout(idVbms)  Write out bottom  V-momentum stress.
!
!  Hout(idUbrs)  Write out current-induced, U-momentum stress.
!  Hout(idVbrs)  Write out current-induced, V-momentum stress.
!  Hout(idUbws)  Write out wind-induced, bottom U-wave stress.
!  Hout(idVbws)  Write out wind-induced, bottom V-wave stress.
!  Hout(idUbcs)  Write out bottom maximum wave and current U-stress.
!  Hout(idVbcs)  Write out bottom maximum wave and current V-stress.
!
!  Hout(idUbot)  Write out wind-induced, bed wave orbital U-velocity.
!  Hout(idVbot)  Write out wind-induced, bed wave orbital V-velocity.
!  Hout(idUbur)  Write out bottom U-velocity above bed.
!  Hout(idVbvr)  Write out bottom V-velocity above bed.
!
!  Hout(idW2xx)  Write out 2D radiation stress, Sxx component.
!  Hout(idW2xy)  Write out 2D radiation stress, Sxy component.
!  Hout(idW2yy)  Write out 2D radiation stress, Syy component.
!  Hout(idU2rs)  Write out 2D U-radiation stress.
!  Hout(idV2rs)  Write out 2D V-radiation stress.
!  Hout(idU2Sd)  Write out 2D U-Stokes velocity.
!  Hout(idV2Sd)  Write out 2D V-Stokes velocity.
!
!  Hout(idW3xx)  Write out 3D radiation stress, Sxx component.
!  Hout(idW3xy)  Write out 3D radiation stress, Sxy component.
!  Hout(idW3yy)  Write out 3D radiation stress, Syy component.
!  Hout(idW3zx)  Write out 3D radiation stress, Szx component.
!  Hout(idW3zy)  Write out 3D radiation stress, Szy component.
!  Hout(idU3rs)  Write out 3D U-radiation stress.
!  Hout(idV3rs)  Write out 3D V-radiation stress.
!  Hout(idU3Sd)  Write out 3D U-Stokes velocity.
!  Hout(idV3Sd)  Write out 3D V-Stokes velocity.
!
!  Hout(idWamp)  Write out wave height.
!  Hout(idWlen)  Write out wave length.
!  Hout(idWdir)  Write out wave direction.
!  Hout(idWptp)  Write out wave surface period.
!  Hout(idWpbt)  Write out wave bottom period.
!  Hout(idWorb)  Write out wave bottom orbital velocity.
!  Hout(idWdis)  Write out wave dissipation.
!
!  Hout(idPair)  Write out surface air pressure.
!  Hout(idUair)  Write out surface U-wind component.
!  Hout(idVair)  Write out surface V-wind component.
!
!  Hout(idTsur)  Write out surface net heat and salt flux
!  Hout(idLhea)  Write out latent heat flux.
!  Hout(idShea)  Write out sensible heat flux.
!  Hout(idLrad)  Write out long-wave radiation flux.
!  Hout(idSrad)  Write out short-wave radiation flux.
!  Hout(idEmPf)  Write out E-P flux.
!  Hout(idevap)  Write out evaporation rate.
!  Hout(idrain)  Write out precipitation rate.
!
!  Hout(idDano)  Write out density anomaly.
!  Hout(idVvis)  Write out vertical viscosity coefficient.
!  Hout(idTdif)  Write out vertical diffusion coefficient of temperature.
!  Hout(idSdif)  Write out vertical diffusion coefficient of salinity.
!  Hout(idHsbl)  Write out depth of oceanic surface boundary layer.
!  Hout(idHbbl)  Write out depth of oceanic bottom boundary layer.
!  Hout(idMtke)  Write out turbulent kinetic energy.
!  Hout(idMtls)  Write out turbulent kinetic energy times length scale.
!
!  Hout(inert)   Write out extra inert passive tracers.
!
!  Hout(idBott)  Write out exposed sediment layer properties, 1:MBOTP.
!
!============================================================================================
! Logical switches (T/F) to activate writing of time-averaged fields into
! AVERAGE file.
!============================================================================================
!
!  Aout(idUvel)  Write out 3D U-velocity component.
!  Aout(idVvel)  Write out 3D V-velocity component.
!  Aout(idWvel)  Write out 3D W-velocity component.
!  Aout(idOvel)  Write out 3D omega vertical velocity.
!  Aout(idUbar)  Write out 2D U-velocity component.
!  Aout(idVbar)  Write out 2D V-velocity component.
!  Aout(idFsur)  Write out free-surface.
!
!  Aout(idTvar)  Write out active (NAT) tracers: temperature and salinity.
!
!  Aout(idUsms)  Write out surface U-momentum stress.
!  Aout(idVsms)  Write out surface V-momentum stress.
!  Aout(idUbms)  Write out bottom  U-momentum stress.
!  Aout(idVbms)  Write out bottom  V-momentum stress.
!
!  Aout(idW2xx)  Write out 2D radiation stress, Sxx component.
!  Aout(idW2xy)  Write out 2D radiation stress, Sxy component.
!  Aout(idW2yy)  Write out 2D radiation stress, Syy component.
!  Aout(idU2rs)  Write out 2D U-radiation stress.
!  Aout(idV2rs)  Write out 2D V-radiation stress.
!  Aout(idU2Sd)  Write out 2D U-Stokes velocity.
!  Aout(idV2Sd)  Write out 2D V-Stokes velocity.
!
!  Aout(idW3xx)  Write out 3D radiation stress, Sxx component.
!  Aout(idW3xy)  Write out 3D radiation stress, Sxy component.
!  Aout(idW3yy)  Write out 3D radiation stress, Syy component.
!  Aout(idW3zx)  Write out 3D radiation stress, Szx component.
!  Aout(idW3zy)  Write out 3D radiation stress, Szy component.
!  Aout(idU3rs)  Write out 3D U-radiation stress.
!  Aout(idV3rs)  Write out 3D V-radiation stress.
!  Aout(idU3Sd)  Write out 3D U-Stokes velocity.
!  Aout(idV3Sd)  Write out 3D V-Stokes velocity.
!
!  Aout(idPair)  Write out surface air pressure.
!  Aout(idUair)  Write out surface U-wind component.
!  Aout(idVair)  Write out surface V-wind component.
!
!  Aout(idTsur)  Write out surface net heat and salt flux
!  Aout(idLhea)  Write out latent heat flux.
!  Aout(idShea)  Write out sensible heat flux.
!  Aout(idLrad)  Write out long-wave radiation flux.
!  Aout(idSrad)  Write out short-wave radiation flux.
!  Aout(idevap)  Write out evaporation rate.
!  Aout(idrain)  Write out precipitation rate.
!
!  Aout(idDano)  Write out density anomaly.
!  Aout(idVvis)  Write out vertical viscosity coefficient.
!  Aout(idTdif)  Write out vertical diffusion coefficient of temperature.
!  Aout(idSdif)  Write out vertical diffusion coefficient of salinity.
!  Aout(idHsbl)  Write out depth of oceanic surface boundary layer.
!  Aout(idHbbl)  Write out depth of oceanic bottom boundary layer.
!
!  Aout(id2dRV)  Write out 2D relative vorticity (vertically integrated).
!  Aout(id3dRV)  Write out 3D relative vorticity.
!  Aout(id2dPV)  Write out 2D potential vorticity (shallow water).
!  Aout(id3dPV)  Write out 3D potential vorticity.
!
!  Aout(idu3dD)  Write out detided 3D U-velocity.
!  Aout(idv3dD)  Write out detided 3D V-velocity.
!  Aout(idu2dD)  Write out detided 2D U-velocity.
!  Aout(idv2dD)  Write out detided 2D V-velocity.
!  Aout(idFsuD)  Write out detided free-surface
!
!  Aout(idTrcD)  Write out detided temperature and salinity.
!
!  Aout(idHUav)  Write out u-volume flux, Huon.
!  Aout(idHVav)  Write out v-volume flux, Hvom.
!  Aout(idUUav)  Write out quadratic <u*u> term.
!  Aout(idUVav)  Write out quadratic <u*v> term.
!  Aout(idVVav)  Write out quadratic <v*v> term.
!  Aout(idU2av)  Write out quadratic <ubar*ubar> term.
!  Aout(idV2av)  Write out quadratic <vbar*vbar> term.
!  Aout(idZZav)  Write out quadratic <zeta*zeta> term.
!
!  Aout(idTTav)  Write out quadratic <t*t> temperature and salinity terms.
!  Aout(idUTav)  Write out quadratic <u*t> temperature and salinity terms.
!  Aout(idVTav)  Write out quadratic <v*t> temperature and salinity terms.
!  Aout(iHUTav)  Write out temperature and salinity volume flux, <Huon*t>.
!  Aout(iHVTav)  Write out temperature and salinity volume flux, <Hvom*t>.
!
!  Aout(inert)   Write out extra inert passive tracers.
!
!============================================================================================
! Logical switches (T/F) to activate writing of time-averaged fields into
! DIAGNOSTIC file.
!============================================================================================
!
! Time-averaged, 2D momentum (ubar,vbar) diagnostic terms:
! (if DIAGNOSTICS_UV)
!
! Dout(M2rate)   Write out acceleration.
! Dout(M2pgrd)   Write out pressure gradient.
! Dout(M2fcor)   Write out Coriolis force, if UV_COR.
! Dout(M2hadv)   Write out horizontal total advection, if UV_ADV.
! Dout(M2xadv)   Write out horizontal  XI-advection, if UV_ADV.
! Dout(M2yadv)   Write out horizontal ETA-advection, if UV_ADV.
! Dout(M2hrad)   Write out horizontal total radiation stress, NEARSHORE_MELLOR.
! Dout(M2hvis)   Write out horizontal total viscosity, if UV_VIS2 or UV_VIS4.
! Dout(M2xvis)   Write out horizontal  XI-viscosity, if UV_VIS2 or UV_VIS4.
! Dout(M2yvis)   Write out horizontal ETA-viscosity, if UV_VIS2 or UV_VIS4.
! Dout(M2sstr)   Write out surface stress.
! Dout(M2bstr)   Write out bottom stress
!
! Time-averaged, 3D momentum (u,v) diagnostic terms:
! (if SOLVE3D and DIAGNOSTICS_UV)
!
! Dout(M3rate)   Write out acceleration.
! Dout(M3pgrd)   Write out pressure gradient.
! Dout(M3fcor)   Write out Coriolis force, if UV_COR.
! Dout(M3hadv)   Write out horizontal total advection, if UV_ADV.
! Dout(M3xadv)   Write out horizontal  XI-advection, if UV_ADV.
! Dout(M3yadv)   Write out horizontal ETA-advection, if UV_ADV.
! Dout(M3hrad)   Write out horizontal total radiation stress, NEARSHORE_MELLOR.
! Dout(M3vrad)   Write out vertical radiation stress, if NEARSHORE_MELLOR.
! Dout(M3hvis)   Write out horizontal total viscosity, if UV_VIS2 or UV_VIS4.
! Dout(M3xvis)   Write out horizontal  XI-viscosity, if UV_VIS2 or UV_VIS4.
! Dout(M3yvis)   Write out horizontal ETA-viscosity, if UV_VIS2 or UV_VIS4.
! Dout(M3yvis)   Write out horizontal ETA-viscosity, if UV_VIS2 or UV_VIS4.
! Dout(M3vvis)   Write out vertical viscosity.
!
! Time-averaged, active (temperature and salinity) and passive (inert) tracer
! diagnostic terms, [1:NAT+NPT,Ngrids] values expected:
! (if SOLVE3D and DIAGNOSTICS_TS)
!
! Dout(iTrate)   Write out time rate of change.
! Dout(iThadv)   Write out horizontal total advection.
! Dout(iTxadv)   Write out horizontal  XI-advection.
! Dout(iTyadv)   Write out horizontal ETA-advection.
! Dout(iTvadv)   Write out vertical advection.
! Dout(iThdif)   Write out horizontal total diffusion, if TS_DIF2 or TS_DIF4.
! Dout(iTxdif)   Write out horizonta1  XI-diffusion, if TS_DIF2 or TS_DIF4.
! Dout(iTydif)   Write out horizontal ETA-diffusion, if TS_DIF2 or TS_DIF4.
! Dout(iTsdif)   Write out horizontal   S-diffusion, if TS_DIF2 or TS_DIF4 and
!                  rotated tensor (MIX_GEO_TS or MIX_ISO_TS).
! Dout(iTvdif)   Write out vertical diffusion.
!
!============================================================================================
! Generic User parameters.
!============================================================================================
!
!  NUSER       Number of User parameters to consider (integer).
!  USER        Vector containing user parameters (real array). This array
!                is used with the SANITY_CHECK to test the correctness of
!                the tangent linear adjoint models.  It contains information
!                of the model variable and grid point to perturb:
!
!                INT(user(1)):  tangent state variable to perturb
!                INT(user(2)):  adjoint state variable to perturb
!                               [isFsur=1] free-surface
!                               [isUbar=2] 2D U-momentum
!                               [isVbar=3] 2D V-momentum
!                               [isUvel=4] 3D U-momentum
!                               [isVvel=5] 3D V-momentum
!                               [isTvar=6] First tracer (temperature)
!                               [   ...  ]
!                               [isTvar=?] Last tracer
!
!                INT(user(3)):  I-index of tangent variable to perturb
!                INT(user(4)):  I-index of adjoint variable to perturb
!                INT(user(5)):  J-index of tangent variable to perturb
!                INT(user(6)):  J-index of adjoint variable to perturb
!                INT(user(7)):  K-index of tangent variable to perturb, if 3D
!                INT(user(8)):  K-index of adjoint variable to perturb, if 3D
!
!                Set tangent and adjoint parameters to the same values
!                if perturbing and reporting the same variable.
!
!============================================================================================
! I/O NetCDF files parameters.
!============================================================================================
!
! NetCDF-4/HDF5 compression parameters for output files. This capability
! is used when both HDF5 and DEFLATE C-preprocessing options are
! activated. The user needs to compile with the NetCDF-4/HDF5 and MPI
! libraries. File deflation cannot be used in parallel I/O for writing
! because the compression makes it impossible for the HDF5 library
! to exactly map the data to the disk location.  For more information,
! check NetCDF official website: www.unidata.ucar.edu/software/netcdf.
!
! NC_SHUFFLE    Shuffle filter integer flag. If non-zero, turn on shuffle
!                 filter.
!
! NC_DEFLATE    Deflate filter integer flag, If non-zero, turn on deflate
!                 filter at the level specified by the NC_DLEVEL parameter.
!
! NC_DLEVEL     Deflate filter level parameter (integer). If NC_DEFLATE is
!                 non-zero, set the deflate level to this value. Must be
!                 between 0 and 9.
!
!============================================================================================
! Input/output NetCDF file names (string with a maximum of 256 characters).
!============================================================================================
!
!  GRDNAME     Input grid file name.
!  ININAME     Input nonlinear initial conditions file name. It can be a
!                re-start file.
!  IRPNAME     Input representer model initial conditions file name.
!  ITLNAME     Input tangent linear model initial conditions file name.
!  IADNAME     Input adjoint model initial conditions file name.
!  FRCNAME     Input forcing fields file name.
!  CLMNAME     Input climatology fields file name.
!  BRYNAME     Input open boundary data file name.
!  FWDNAME     Input forward solution fields file name.
!  ADSNAME     Input adjoint sensitivity functional file name.
!
!  GSTNAME     Output GST analysis re-start file name.
!  RSTNAME     Output re-start file name.
!  HISNAME     Output history file name.
!  TLFNAME     Output impulse forcing for tangent linear (TLM and RPM) models.
!  TLMNAME     Output tangent linear file name.
!  ADJNAME     Output adjoint file name.
!  AVGNAME     Output averages file name.
!  DIANAME     Output diagnostics file name.
!  STANAME     Output stations file name.
!  FLTNAME     Output floats file name.
!
!============================================================================================
! Input ASCII parameters file names.
!============================================================================================ 
!
!  APARNAM     Input assimilation parameters file name.
!  SPOSNAM     Input stations positions file name.
!  FPOSNAM     Input initial drifters positions file name.
!  BPARNAM     Input biological parameters file name.
!  SPARNAM     Input sediment transport parameters file name.
!  USRNAME     USER's input generic file name.
!
-->

</entry_id>
